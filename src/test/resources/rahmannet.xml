<?xml version='1.0' encoding='UTF-8'?><rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:openSearch="http://a9.com/-/spec/opensearchrss/1.0/" xmlns:blogger="http://schemas.google.com/blogger/2008" xmlns:georss="http://www.georss.org/georss" xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr="http://purl.org/syndication/thread/1.0" version="2.0">
    <channel>
        <atom:id>tag:blogger.com,1999:blog-37157465</atom:id>
        <lastBuildDate>Sat, 30 Dec 2017 12:30:59 +0000</lastBuildDate>
        <title>Reza Rahman&#39;s Java Blog</title>
        <description>My ramblings on Java EE, Java SE and the crazy World of technology in general.</description>
        <link>http://blog.rahmannet.net/</link>
        <managingEditor>noreply@blogger.com (Reza Rahman)</managingEditor>
        <generator>Blogger</generator>
        <openSearch:totalResults>94</openSearch:totalResults>
        <openSearch:startIndex>1</openSearch:startIndex>
        <openSearch:itemsPerPage>25</openSearch:itemsPerPage>
        <item>
            <guid isPermaLink="false">tag:blogger.com,1999:blog-37157465.post-580963025382398203</guid>
            <pubDate>Fri, 21 Apr 2017 17:39:00 +0000</pubDate>
            <atom:updated>2017-04-21T13:53:09.619-04:00</atom:updated>
            <title>Servlet 4 Public Review Starts Now!</title>
            <description>Servlet 4 has just posted a public review (this is the last step before the proposed final specification). Servlet 4 is easily one of the most critical components of Java EE 8. The primary aim of Servlet 4 is to bring first-class, core standards based HTTP/2 support to the server-side Java ecosystem. Most of the changes in Servlet 4 (with the exception of things like the server push API) should be transparent to developers and are enforced in terms of requirements for Servlet 4 implementations to fully support HTTP/2. A decent resource to learn more about Servlet 4 and HTTP/2 should be my slide deck (please &lt;a href=&quot;https://www.slideshare.net/reza_rahman/http2-and-what-it-means-for-the-java-ee-ecosystem&quot;&gt;click here&lt;/a&gt; if you can&#39;t see the embedded slide deck). You are also welcome to check out the corresponding &lt;a href=&quot;http://www.captechconsulting.com/videos/http2-and-what-it-means-for-the-java-ee-ecosystem&quot;&gt;screen-cast here&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;&lt;center&gt;&lt;iframe allowfullscreen=&quot;&quot; frameborder=&quot;0&quot; height=&quot;485&quot; marginheight=&quot;0&quot; marginwidth=&quot;0&quot; scrolling=&quot;no&quot; src=&quot;https://www.slideshare.net/slideshow/embed_code/key/50HAUU2azGq8gd&quot; style=&quot;border-width: 1px; border: 1px solid #ccc; margin-bottom: 5px; max-width: 100%;&quot; width=&quot;595&quot;&gt; &lt;/iframe&gt; &lt;div style=&quot;margin-bottom: 5px;&quot;&gt;&lt;strong&gt; &lt;a href=&quot;https://www.slideshare.net/reza_rahman/http2-and-what-it-means-for-the-java-ee-ecosystem&quot; target=&quot;_blank&quot; title=&quot;HTTP/2 and What it Means for the Java EE Ecosystem&quot;&gt;HTTP/2 and What it Means for the Java EE Ecosystem&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&quot;https://www.slideshare.net/reza_rahman&quot; target=&quot;_blank&quot;&gt;Reza Rahman&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;/center&gt;You can download and take a look at the draft specification itself from the&amp;nbsp;&lt;a href=&quot;https://jcp.org/aboutJava/communityprocess/pr/jsr369/index.html&quot;&gt;JCP site&lt;/a&gt;. While this is essentially the final stretch for Servlet 4, below are some ways you can still engage (most of it comes directly from the &lt;a href=&quot;https://glassfish.java.net/adoptajsr&quot;&gt;Adopt-a-JSR page&lt;/a&gt; I drafted while still at Oracle). The Servlet 4 specification lead Ed Burns has also asked for specific help in testing out the server-push feature. &lt;a href=&quot;http://ridingthecrest.com/blog/2017/04/18/please-test-mojarra-2_3_1-with-server-push.html&quot;&gt;His write-up&lt;/a&gt; is actually also a great introduction to the feature.&lt;br /&gt;&lt;ul&gt;&lt;li&gt;You can still join the specification itself as an expert or a contributor. You can do that via the &lt;a href=&quot;https://www.jcp.org/en/jsr/detail?id=369&quot;&gt;JCP page for the specification&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;You can have your JUG officially support the standard through &lt;a href=&quot;https://community.oracle.com/community/java/jcp/adopt-a-jsr&quot;&gt;Adopt-a-JSR&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;You can simply join the discussion without any ceremony by subscribing to the&amp;nbsp;&lt;a href=&quot;https://java.net/projects/servlet-spec/lists&quot;&gt;Servlet specification user alias&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;You can share ideas and feedback, possibly by entering issues in the &lt;a href=&quot;https://java.net/jira/browse/SERVLET_SPEC&quot;&gt;public issue tracker&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;You can read the public review specification now.&lt;/li&gt;&lt;li&gt;You can try out the reference implementation now.&lt;/li&gt;&lt;li&gt;You can write or speak about Servlet 4 now.&lt;/li&gt;&lt;li&gt;You can encourage others to participate.&lt;/li&gt;&lt;/ul&gt;The next step is up to you. You can be a real part of Java&#39;s ongoing success. If you have any questions I am happy to try to help - just drop me a note any time.</description>
            <link>http://blog.rahmannet.net/2017/04/servlet-4-public-review-starts-now.html</link>
            <author>noreply@blogger.com (Reza Rahman)</author>
            <thr:total>0</thr:total>
        </item>
        <item>
            <guid isPermaLink="false">tag:blogger.com,1999:blog-37157465.post-8228186470977932133</guid>
            <pubDate>Thu, 13 Apr 2017 20:59:00 +0000</pubDate>
            <atom:updated>2017-04-14T12:33:10.170-04:00</atom:updated>
            <title>Spring, Java EE and the Lilliputian Wars</title>
            <description>&lt;center&gt;&lt;i&gt;“Difference in opinions has cost many millions of lives: for instance, whether flesh be bread, or bread be flesh; whether the juice of a certain berry be blood or wine.”&lt;/i&gt;&lt;/center&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; - Jonathan Swift, Gulliver&#39;s Travels&lt;br /&gt;&lt;br /&gt;Gulliver&#39;s Travels is one of my all-time favorite books. I read it twice from two completely different perspectives. In my pre-teen years I read it as a completely absorbing fantasy novel. When I read it again years later in my late teens, I began to realize what the classic novel actually was. It is a brilliant sociopolitical satire and biting commentary on the less than flattering parts of human nature - deliberately masked as a work of fiction in a time when such public commentary could cost you your life, liberty and happiness. Some recent events in our &quot;colorful&quot; industry reminded me of a particular lesson that Jonathan Swift was desperately trying to deliver to mankind. Bear with me. I think you&#39;ll see the analogy.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Fragile Rays of Hope&lt;/b&gt;&lt;br /&gt;Sad as it may be, I think it has long been the case that people who choose to be outspoken advocates of Java EE and open standards accept some level of contention as an inescapable reality. You can try to hide from it, but beyond a certain level of visibility the contention is bound to find you in one way or the other. When I first decided to stand up for Java EE and open standards, I tried my best to hide. After some years I came to realize trying to hide actually isn&#39;t a real choice if one cares about the long-term health of server-side Java. But neither is reveling in the contention. That&#39;s a good indication you&#39;ve lost your soul to the most malevolent parts of the contention.&lt;br /&gt;&lt;br /&gt;During the most recent ongoing episode of the contention though something very unexpected happened for the first time that has given me a slim ray of hope pointing to a better future. The main point of this entry is to try to expand that tiny sliver to be as shiny of a ray of light as possible.&lt;br /&gt;&lt;br /&gt;As largely a neutral by-stander of the recent contention, Lieven Doclo decided to write up his observations. For those that don&#39;t know Lieven, he isn&#39;t just a random developer. He is one of the small handful of long-time Spring ecosystem committers that isn&#39;t an employee of the parent company central to moving Spring forward. He has always believed there is a distinct separation between the Spring community and any particular company working on the Spring codebase. This isn&#39;t unlike what most of us believe in the Java EE community. One of the reasons we value Java EE so much is it&#39;s relative separation from the likes of Oracle and IBM. Every sentence of his &lt;a href=&quot;https://www.insaneprogramming.be/article/2017/04/07/java-ee-spring/&quot;&gt;exceptionally written entry&lt;/a&gt; is well worth reading and thinking about, but I&#39;ll highlight the most importance passages here for your convenience:&lt;br /&gt;&lt;br /&gt;&lt;i&gt;&quot;The real issue at hand is the fact that both communities do not reflect the opinions of the commercial companies that have a vested interest in one of the approaches and that the way those companies conduct their businesses leaves a bad impression on all of us, tainting the way we look at each other.&lt;/i&gt;&lt;br /&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;i&gt;I’m a Spring framework user. I maintained (and still maintain) code that once was mentioned on the Spring website (Spring Rich Client). I have been a supporter for over 10 years and probably always will be. But do I support [Acme Company]&#39;s below-the-belt hits to the EE community? No. Because it doesn’t serve any purpose except for promoting a commercial position, which I frankly don’t care about because I got into Spring for completely different reasons. Will I ever use EE? As a platform probably not, because Spring fills every need I have and I don’t see the point at the moment. Do I use EE specifications? Sure, I use JPA, JMS, JTA, …&lt;/i&gt;&lt;br /&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;i&gt;People need to realize how silly the fight really is. As developers, we’ve been blessed by not having one but two valid choices to build high-quality applications. And believe me when I say that there are much worse choices in the Java ecosystem to work with than Java EE or Spring. Instead of going at each other, how about we join forces and get rid of those in our industry?&quot;&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;I debated for hours whether I should stop this entry here and let Lieven&#39;s thoughts stand on their own. No one has ever said this before with such clarity, sincerity, courage and integrity. Lieven has pretty much told all of us what the way forward is - and I do mean &lt;i&gt;all&lt;/i&gt; of us. There is not really much else to say. It is now up to us to listen (or not :-().&lt;br /&gt;&lt;br /&gt;Unfortunately or fortunately I find myself compelled to say a few more things about the factors beneath the surface I think has driven the toxic contention for so long. I believe it is best to try to understand the darkness in order to succeed in banishing it forever. Maybe for some of us this will be a much needed part of understanding ourselves a bit better and putting these cancerous sores finally behind us (or not :-().&lt;br /&gt;&lt;br /&gt;&lt;b&gt;The Lilliputian Wars&lt;/b&gt;&lt;br /&gt;For the benefit of folks who have not had the pleasure of reading Gulliver&#39;s Travels, I&#39;ll briefly describe the&amp;nbsp;Lilliputian wars. Lilliput was an island nation of tiny people that Gulliver had the misfortune of visiting in his travels. Gulliver found himself embroiled in a bitter war centered on what end of an egg should be broken to eat it. The great-grandfather of the current emperor had decreed that all eggs be broken on the smaller end after his son accidentally cut himself breaking the egg on the larger end. The problem is that Lilliputians until that point deemed it their religious duty to break eggs on the larger end. This led to many years of needless bloodshed and civil war, eventually even involving the neighboring island nation of&amp;nbsp;Blefuscu.&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://4.bp.blogspot.com/-njHbiepUR7U/WO2F1jMuW2I/AAAAAAAAFLU/3LgXbO3g98EQxN7Y2lr3Fp7t1_vlWk-wQCLcB/s1600/Gulliver_war.jpg&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;https://4.bp.blogspot.com/-njHbiepUR7U/WO2F1jMuW2I/AAAAAAAAFLU/3LgXbO3g98EQxN7Y2lr3Fp7t1_vlWk-wQCLcB/s1600/Gulliver_war.jpg&quot; /&gt;&lt;/a&gt;&lt;/div&gt;What&amp;nbsp;Jonathan Swift was actually describing is the early eighteenth century strife between Catholics and Protestants in Great Britain eventually leading to a very costly war between Protestant Great Britain and Catholic France (interestingly Swift himself was actually an Irish Anglican minister). The message Swift was trying to convey was that the religious strife of his day was petty and did not warrant the level of conflict, harm and animosity that it caused. By extension he was commenting on the petty but incredibly damaging rivalries that humans are prone to get themselves into. It is fairly clear Swift felt that the suffering brought onto ordinary people on both sides was at least in part fueled by Imperial power agendas and whims little to do with the actual common good or truth. &lt;br /&gt;&lt;br /&gt;I hope you were paying attention to the passages I quoted from Lieven. Given what&amp;nbsp;Lieven had to say, I think you get the Lilliputian war analogy now.&lt;br /&gt;&lt;br /&gt;I will be the first to tell you Spring and Java EE have differences. Let me also be the first to tell you that the similarities for most immediate, short-term, common needs are far greater and have been for quite some time now. The level of negativity in the contention obscures this fundamental truth and maybe to some degree actually fuels it. As Swift probably observed, the sad reality of human nature appears to be that the more petty the differences, the more bitter and noisy the quarrel. Next time you decide to enter the Spring/Java EE contention you may want to ask yourself whether the differences you wish to highlight are really worth bitterly bickering over.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Old Grudges Die Hard&lt;/b&gt;&lt;br /&gt;The people that suffered the most from the&amp;nbsp;Lilliputian wars actually had little to do with starting it. They were simply mindlessly continuing a well outdated legacy feud without actually evaluating it&#39;s validity under current circumstances or letting go of their old grudges. As&amp;nbsp;Lieven suggests, this too has strong analogs in the Spring/Java EE contention. The over-the-top, flamboyant negativity was birthed into existence by people that have now largely moved on but we are all left with it&#39;s sad legacy. It is also far too simplistic to think the negativity is all one-sided (it rarely is; negativity has a nasty habit of begetting negativity in return). Indeed one can legitimately claim that there was a time the same kind of negativity that is currently being actively directed at Java EE had some equivalents from the Java EE side in the past. I must honestly say though that I think it was isolated, low-profile and not well-supported. No company certainly actively promoted it. Most of the people in the Java EE community did not stand behind it because we knew it was wrongheaded.&lt;br /&gt;&lt;br /&gt;Whatever the realities of the past may have been, they lie in the past. Perhaps we should remind ourselves that &quot;an eye for an eye will make the whole world blind&quot;. We can&#39;t change the past. We can however choose to let go of old grudges and focus on a brighter mutual future.&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://4.bp.blogspot.com/-fSdr-KhAbTw/WO6n62evHUI/AAAAAAAAFLs/o5UEYf93UO4l6pDu01JiAmVPWdL-embmgCLcB/s1600/feud.jpg&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;https://4.bp.blogspot.com/-fSdr-KhAbTw/WO6n62evHUI/AAAAAAAAFLs/o5UEYf93UO4l6pDu01JiAmVPWdL-embmgCLcB/s1600/feud.jpg&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;center&gt;(This is a bit of an obscure reference but the photo is just great. It&#39;s easy to envision Lieven as Bugs Bunny :-). To fully understand the reference, please look up &quot;Hatfields vs. McCoys&quot;)&lt;/center&gt;&lt;br /&gt;&lt;b&gt;Ignorance is Bliss&lt;/b&gt;&lt;br /&gt;Part of the negativity definitely stems from genuine ignorance. As my fellow Java EE community enthusiast Tim Falconer puts it, the naysayers don&#39;t seem to have bothered to revisit the validity of their assumptions for close to a dozen years. Technological ignorance aside, there are also more emotive issues rooted in the past including views that Java EE is large vendor-driven only, expensive, non-Open Source and so on. Like all ignorance, the antidote to this is greater exposure. These folks should set their pre-conceived notions aside and connect on social media to an actual Java EE user. Thanks to the continued organic growth of Java EE, such people are really not that hard to find these days. What you will likely find is that Java EE has evolved beyond recognition, forged through ever-growing real world adoption and grassroots community feedback over the past dozen years. Java EE is now more grassroots community driven than pretty much any other technology around. You can get outstanding open source Java EE implementations without paying a cent. There are tiny companies developing Java EE implementations alongside the largest companies in the world. And yes - Java EE is productive, easy-to-use, lightweight, Docker-friendly, cloud-ready and microservices capable. Just ask my friend and fellow Java EE enthusiast &lt;a href=&quot;https://www.youtube.com/user/bienadam&quot;&gt;Adam Bien&lt;/a&gt; :-). None of this means you need to suddenly become a Java EE true convert. It simply means you probably should try and revisit your assumptions.&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://2.bp.blogspot.com/-GmLpvC6I5rk/WO_QpI25KyI/AAAAAAAAFMs/2eHQFjNidQY2p4KW3xrGCiHUuWn_iBAwACLcB/s1600/head_sand.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;https://2.bp.blogspot.com/-GmLpvC6I5rk/WO_QpI25KyI/AAAAAAAAFMs/2eHQFjNidQY2p4KW3xrGCiHUuWn_iBAwACLcB/s1600/head_sand.png&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;b&gt;The Temptations of Negative Marketing&lt;/b&gt;&lt;br /&gt;The temptations of negative marketing really are very strong, especially under some specific conditions. The largest factors by far are the ones I&#39;ve already mentioned. Once the negativity train starts full steam, it really is easy to just keep going mindlessly no matter what. To see this in action, all you need to observe is the US elections. As the nation gets further polarized, the more negative the campaigning keeps getting every year - perhaps reaching unthinkable levels in 2016. The thing is that most voters &lt;a href=&quot;http://www.gallup.com/poll/2731/negative-campaigning-disliked-most-americans.aspx&quot;&gt;don&#39;t actually see the negativity in a very good light&lt;/a&gt;, although there is always a polarized segment on either side that will mindlessly cheer on whatever outrageous negative thing &quot;their&quot; candidate has to say. Most just continue to distrust a candidate even after they &quot;win&quot; due to their campaign tactics. Unfortunately candidates themselves fail to realize this until it is too late because their closest supporters are true believers of the negativity.&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://2.bp.blogspot.com/-6jLxM8638-w/WO7IIQEMmNI/AAAAAAAAFL8/hTWBl0Qtj-g7MVd3_bNM93NDhVD4SNwbQCLcB/s1600/mudslinging_20121003155438_640_480.jpg&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;231&quot; src=&quot;https://2.bp.blogspot.com/-6jLxM8638-w/WO7IIQEMmNI/AAAAAAAAFL8/hTWBl0Qtj-g7MVd3_bNM93NDhVD4SNwbQCLcB/s400/mudslinging_20121003155438_640_480.jpg&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;We would be mistaken to think the same thing is not happening in Java. Though there are the polarized crowds in both the Spring and Java EE camps, most Java developers sit squarely in the middle. Whatever technology set they actually use, when asked about adoption or migration in &lt;a href=&quot;https://javaee-guardians.io/java-ee-adoption-surveys&quot;&gt;survey after survey&lt;/a&gt; the solid majority (50-60%) indicate they value both and see a bright future for both. If we want to retain the trust of these people going negative is probably not the smartest thing to do. &lt;br /&gt;&lt;br /&gt;Folks that actively engage in negative marketing often think they can mask their negativity as something harmless or even well-intentioned! In reality negative marketing is easy to spot for most people. If it is negative statements that are over-the-top, unprovoked, non-constructive, without much proof, seems inaccurate, obviously unbalanced, outdated or serves no other purpose than to try to put down the &quot;competition&quot;, it is probably exactly what it looks like.&lt;br /&gt;&lt;br /&gt;Indeed negative marketing carries heavy risks for most businesses. If a serious debunking effort actually makes negative marketing intent crystal clear, a business can lose its goodwill with customers for a long time. That is because the strange thing with humans is that we care about fairness at an innate level. &lt;a href=&quot;http://www.npr.org/sections/health-shots/2014/09/18/349514734/life-s-unfair-but-chimps-and-humans-know-when-to-even-the-score&quot;&gt;Scientific studies&lt;/a&gt; show that this surprising trait has been a key to our continued evolutionary success as a species.&lt;br /&gt;&lt;br /&gt;A serious debunking effort was unlikely in the Sun era because of it&#39;s idealistic but foolhardy culture of trying to be the &quot;nice guys&quot; by never confronting anyone no matter what. Oracle has a similar problem due to it&#39;s top-down command structure that strongly encourages employee communication silence on most things. I think it is important to note that a significant debunking effort is far more likely today as the grassroots Java EE community quietly continues to gain steam. Indeed folks like Adam Bien,&amp;nbsp;&lt;a href=&quot;https://blog.sebastian-daschner.com/entries/stop_saying_heavyweight&quot;&gt;Sebastian Daschner&lt;/a&gt; and &lt;a href=&quot;https://antoniogoncalves.org/2016/02/02/o-java-ee-7-application-servers-where-art-thou&quot;&gt;Antonio Goncalves&lt;/a&gt; have been tirelessly FUD busting for a while now. Most adoption since Java EE 5 is thanks exactly to these grassroots community efforts. One must also give due credit to companies like Payara and Red Hat for standing up on behalf of the Java EE community when needed.&lt;br /&gt;&lt;br /&gt;It is wise to think carefully about whether negative marketing is really worth these kinds of risks despite it&#39;s obvious temptations. On the other hand, there is far more to gain by extending a hand of genuine friendship and working together towards the shared bright future most Java developers really want.&lt;br /&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;b&gt;The Zero Sum Game&lt;/b&gt;&lt;br /&gt;This last likely underlying major factor fueling the toxic contention has actually been a Silicon Valley epidemic for the past few years. It is described extremely well by&amp;nbsp;Dan Lyons in his excellent book &lt;a href=&quot;https://www.amazon.com/Disrupted-My-Misadventure-Start-Up-Bubble/dp/0316306088&quot;&gt;&quot;Disrupted&quot;&lt;/a&gt; (if you have not read the book, I suggest you do so soon - especially if you work for a startup anywhere). The problem is that Silicon Valley has moved from a long-term revenue making business model to a model that has an unhealthy focus on cashing out quickly through IPOs and moving on to the next startup. In order to convince Wall Street of inflated IPO evaluations, &quot;good enough&quot; is no longer good enough. It is not enough to have a long-term but modest product market. Every company must pretend it will &quot;take over the world&quot; and drive all of it&#39;s competition out of business overnight - whether that is actually realistic or not. Co-existence is no longer a choice. It is all or nothing all the time. Heaven forbid if you are an employee with stock options that has any doubt whatsoever of this totalitarian vision and mission. These kinds of irrational expectations make for unhealthy high-pressure conditions that will make otherwise decent people think, say and do things they probably otherwise never would.&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://1.bp.blogspot.com/-JxApxclBoik/WO7fggi28NI/AAAAAAAAFMM/61Q_bU4TskUibJ4OB6nWAKqlCTVORxj8ACLcB/s1600/zerosum.jpeg&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;320&quot; src=&quot;https://1.bp.blogspot.com/-JxApxclBoik/WO7fggi28NI/AAAAAAAAFMM/61Q_bU4TskUibJ4OB6nWAKqlCTVORxj8ACLcB/s320/zerosum.jpeg&quot; width=&quot;229&quot; /&gt;&lt;/a&gt;&lt;/div&gt;The thing that so many of us appreciate about Java EE as an open standard is that co-existence is a built-in assumption. Java EE vendors know out-of-the-gate they are not going to be the only one dominating a market but must share the revenue space with other Java EE vendors. In fact Sun did more than that. It made virtually every Java EE API available standalone so that the server-side Java ecosystem would broaden even farther than simply Java EE platform vendors. Sun&#39;s mindset was the opposite of zero sum - it was to expand the market as much as possible so that it can be shared harmoniously by as many players as possible. Oracle will need to continue this legacy of co-existence whether it is comfortable with this vision or not. &lt;br /&gt;&lt;br /&gt;The strange thing is that the fundamentals of the cloud vision also actually favor co-existence. In order to really succeed in the cloud it is needlessly self-limiting to support only your own technology and your own cloud. It makes much more sense to support and promote as many decent technologies on your cloud as possible. It is even important clouds work well with each other. Trying to put down a technology just because you don&#39;t fully control it and risking alienating the users of that technology hardly makes any rational sense in this world at all.&lt;br /&gt;&lt;br /&gt;This I think brings me to the most important part of my write-up - the concrete way forward towards a far less dark and negative and far happier and brighter future together.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Can&#39;t We Just Get Along?&lt;/b&gt;&lt;br /&gt;The fact that makes me the most sad is that we all know well how to get along together and avoid pitting ourselves against one another. There is no secret sauce. It is all tried and true practices that have been around for ages. Many established companies (unfortunately not the Silicon Valley startup types) have these practices written down in their policies in one way or another. In fact what I&#39;ll suggest as a way forward for all of us (and I do mean &lt;i&gt;all &lt;/i&gt;of us) is taken directly from the policies of a great company that I had the pleasure of working for some years ago as an employee. The owners of the company had a pretty blue-collar business but took real pride in what they did (the kind of pride I see sorely missing in the rat race of the corporate world). They drew their principles from the &lt;a href=&quot;https://en.wikipedia.org/wiki/Golden_Rule&quot;&gt;Golden Rule&lt;/a&gt; rooted in their deeply Christian background:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Definitely promote the strengths of your own favored technology. It should be possible most of the time to do that without even mentioning the &quot;competition&quot;. It is also important to acknowledge and try to improve the weaknesses of your favored technology.&lt;/li&gt;&lt;li&gt;Speaking negatively of the &quot;competition&quot; should never be necessary. Indeed it builds goodwill to mention the strengths of the &quot;competition&quot; every now and then.&lt;/li&gt;&lt;li&gt;It is inevitably sometimes necessary to defend your own favored technology. In these situations, pointing out the weaknesses of the &quot;competition&quot; is sometimes unavoidable. The worst case of this is when you are asked to do a comparison. Even then it is important to strive for fairness and balance the best you can. Most of the time it should actually be possible to defend your favored technology based on it&#39;s strengths alone.&lt;/li&gt;&lt;/ul&gt;I think these are easy principles for anyone to keep in mind. I&#39;ve tried to follow them for years even when I didn&#39;t have to. I believe it has served me and others well. I really think this is all it takes for harmonious coexistence. &lt;br /&gt;&lt;br /&gt;I hope this is some useful food for thought. It&#39;s time we ended the toxic negativity on both sides and made real efforts towards a brighter future together. I think people like Lieven expressing their sincere thoughts gives us &lt;i&gt;all&lt;/i&gt; the perfect opportunity. Let&#39;s not let it go to waste this time. We can respect our differences but still do justice to our common goals. Catholicism and Protestantism have done it incredibly successfully for years now. There are no more turf wars, clergy attacking at each others&#39; beliefs or cannons being fired. The British and the French are such good enemies they can&#39;t resist being friends.&lt;br /&gt;&lt;br /&gt;Jonathan Swift would be proud and so would Gulliver.&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://2.bp.blogspot.com/-cilgXehADEU/WO7zjfhaM0I/AAAAAAAAFMc/SAiu1jM8Cz0UWP-M-4Tv_pihDdpQwYAuACLcB/s1600/get_along.jpg&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;261&quot; src=&quot;https://2.bp.blogspot.com/-cilgXehADEU/WO7zjfhaM0I/AAAAAAAAFMc/SAiu1jM8Cz0UWP-M-4Tv_pihDdpQwYAuACLcB/s400/get_along.jpg&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;</description>
            <link>http://blog.rahmannet.net/2017/04/spring-java-ee-and-lilliputian-wars.html</link>
            <author>noreply@blogger.com (Reza Rahman)</author>
            <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://4.bp.blogspot.com/-njHbiepUR7U/WO2F1jMuW2I/AAAAAAAAFLU/3LgXbO3g98EQxN7Y2lr3Fp7t1_vlWk-wQCLcB/s72-c/Gulliver_war.jpg" height="72" width="72"/>
            <thr:total>2</thr:total>
        </item>
        <item>
            <guid isPermaLink="false">tag:blogger.com,1999:blog-37157465.post-5124079360696070621</guid>
            <pubDate>Mon, 10 Apr 2017 19:07:00 +0000</pubDate>
            <atom:updated>2017-04-10T15:17:41.847-04:00</atom:updated>
            <title>DZone/Java EE Guardians Survey Results: JSON</title>
            <description>As some of you are aware, the &lt;a href=&quot;https://javaee-guardians.io/&quot;&gt;Java EE Guardians&lt;/a&gt; and DZone jointly conducted a community survey to help determine Java EE 8 features prior to JavaOne 2016. You may also be aware that &lt;a href=&quot;https://java.net/projects/javaee-spec/lists/users/archive/2016-09/message/0&quot;&gt;we shared the results of that survey with Oracle&lt;/a&gt; before the details of the renewed Java EE 8 scope was announced. Now is a great time to start analyzing those results a bit more. I&#39;ve already done a &lt;a href=&quot;http://blog.rahmannet.net/2017/01/dzonejava-ee-guardian-survey-results.html&quot;&gt;high level summary of the results&lt;/a&gt;. I&#39;ve also done a deeper dive into the responses for &lt;a href=&quot;http://blog.rahmannet.net/2017/01/dzonejava-ee-guardians-survey-results.html&quot;&gt;HTTP/2 and Servlet 4&lt;/a&gt;,&amp;nbsp;&lt;a href=&quot;http://blog.rahmannet.net/2017/02/dzonejava-ee-guardians-survey-results.html&quot;&gt;Java SE 8 alignment&lt;/a&gt;, &lt;a href=&quot;http://blog.rahmannet.net/2017/03/dzonejava-ee-guardians-survey-results.html&quot;&gt;security&lt;/a&gt;, &lt;a href=&quot;http://blog.rahmannet.net/2017/03/dzonejava-ee-guardians-survey-results_13.html&quot;&gt;standards/innovation&lt;/a&gt; and&amp;nbsp;&lt;a href=&quot;http://blog.rahmannet.net/2017/03/dzonejava-ee-guardians-survey-results_24.html&quot;&gt;microservices&lt;/a&gt;.&amp;nbsp;In this entry I&#39;ll take a look at the responses for strengthening JSON support in Java EE.&lt;br /&gt;&lt;br /&gt;Here is how the survey phrased the question:&lt;br /&gt;&lt;br /&gt;&quot;JSON has replaced XML as the de-facto data interchange format. Java EE has long had excellent support for XML through JAXP and JAXB. On the other hand Java EE 7 includes only a very basic programmatic API similar to JAXP named JSON-P.&lt;br /&gt;&lt;br /&gt;Java EE 8 has been slated to include a minor update to JSON-P that incorporates the latest JSON standards such as JSON Pointer. In addition a higher level annotation based API similar to JAXB named JSON-B has been targeted for Java EE 8.&lt;br /&gt;&lt;br /&gt;How important is it to strengthen JSON support in &amp;nbsp;Java EE?&quot;.&lt;br /&gt;&lt;br /&gt;The following graphic shows how the community responded. Clearly the mandate for adding more JSON support to Java EE is extremely strong. Indeed this is one of the items supported the most strongly along with HTTP/2, security and Java SE 8 alignment. 62% said it is very important while another 24% said it is important - with a combined total of 86%. Only about 3% said it is not important.&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://4.bp.blogspot.com/--fGPMAY7erY/WOvC-BRoN_I/AAAAAAAAFLE/h0IgTJblL_4O0ecGS0PkIQmT3zOPJSbsQCLcB/s1600/json.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;247&quot; src=&quot;https://4.bp.blogspot.com/--fGPMAY7erY/WOvC-BRoN_I/AAAAAAAAFLE/h0IgTJblL_4O0ecGS0PkIQmT3zOPJSbsQCLcB/s400/json.png&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;/div&gt;Here are some representative comments from participants in the order that people filled in the survey:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&quot;It is important to make JSON easy to utilize from Java EE, so JSON-B is an important addition to the platform. The enhancements to JSON-P would be nice to have since they are part of the JSON standards&quot;&lt;/li&gt;&lt;li&gt;&quot;It would help bring some order to the zoo of libraries for JSON in Java like Jackson and GSON. Anything that would help standardize the behaviors of those implementations would be a good thing&quot;&lt;/li&gt;&lt;li&gt;&quot;A more mature JSON-P, and the inclusion of JSON-B, are godsends for any Java code that needs to work with JSON data&quot;&lt;/li&gt;&lt;li&gt;&quot;Current frameworks, such as Jackson and GSON lack standardization, making them hard to work with&quot;&lt;/li&gt;&lt;li&gt;&quot;JSON rules the world when it comes to interchange formats. Java EE should make it a first class citizen&quot;&lt;/li&gt;&lt;/ul&gt;Like most items,&amp;nbsp;&lt;a href=&quot;https://blogs.oracle.com/theaquarium/entry/java_ee_8_community_survey2&quot;&gt;Oracle&#39;s own Java EE 8/9 survey&lt;/a&gt;&amp;nbsp;essentially mirrors our survey results. Indeed the Oracle survey serves to clarify nicely what developers are thinking. While JSON-B ranked high at 4.1, support for the JSON-P update was much weaker at 3.8. &amp;nbsp;For context, in the Oracle survey 1 indicated &quot;Not Important&quot; while 5 indicated &quot;Very Important&quot;. This generally makes a lot sense. JSON-P was already a pretty complete API in Java EE 7 and the use cases for JSON-B are likely a lot higher than the lower-level JSON-P API. What is notable but not altogether surprising is the strong support in favor of standardization the JSON voting patterns represent. Java EE 7 and JAX-RS 2 implementations have long provided JSON binding support in non-standard ways - most notably through Jackson and EclipseLink MOXy. Nonetheless, developers have a strong desire to have standard Java APIs for JSON.&lt;br /&gt;&lt;br /&gt;Fortunately Oracle decided to move forward both JSON-P and JSON-B in Java EE 8. Indeed both APIs are now rapidly nearing completion. If you are interested, a great way to start learning about stronger JSON support in Java EE 8 is by looking at a slide deck from Dmitry Kornilov. Dmitry leads both the JSON-P and JSON-B specifications. If you can&#39;t see the embedded slide deck, please click &lt;a href=&quot;https://www.slideshare.net/DmitryKornilov/json-support-in-java-ee-8&quot;&gt;here&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;&lt;center&gt;&lt;iframe allowfullscreen=&quot;&quot; frameborder=&quot;0&quot; height=&quot;485&quot; marginheight=&quot;0&quot; marginwidth=&quot;0&quot; scrolling=&quot;no&quot; src=&quot;https://www.slideshare.net/slideshow/embed_code/key/msYnhXtHTmxOJz&quot; style=&quot;border-width: 1px; border: 1px solid #ccc; margin-bottom: 5px; max-width: 100%;&quot; width=&quot;595&quot;&gt; &lt;/iframe&gt; &lt;div style=&quot;margin-bottom: 5px;&quot;&gt;&lt;strong&gt; &lt;a href=&quot;https://www.slideshare.net/DmitryKornilov/json-support-in-java-ee-8&quot; target=&quot;_blank&quot; title=&quot;JSON Support in Java EE 8&quot;&gt;JSON Support in Java EE 8&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&quot;https://www.slideshare.net/DmitryKornilov&quot; target=&quot;_blank&quot;&gt;Dmitry Kornilov&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;/center&gt;&lt;br /&gt;Please do stay tuned as I further look at specific topics in the survey. In addition to my write-up, I would encourage you to look at these survey results yourself and get involved in Java EE 8. You can certainly do so by becoming a part of the&amp;nbsp;&lt;a href=&quot;https://javaee-guardians.io/&quot;&gt;Java EE Guardians&lt;/a&gt;. </description>
            <link>http://blog.rahmannet.net/2017/04/dzonejava-ee-guardians-survey-results.html</link>
            <author>noreply@blogger.com (Reza Rahman)</author>
            <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://4.bp.blogspot.com/--fGPMAY7erY/WOvC-BRoN_I/AAAAAAAAFLE/h0IgTJblL_4O0ecGS0PkIQmT3zOPJSbsQCLcB/s72-c/json.png" height="72" width="72"/>
            <thr:total>0</thr:total>
        </item>
        <item>
            <guid isPermaLink="false">tag:blogger.com,1999:blog-37157465.post-330184155311408690</guid>
            <pubDate>Wed, 05 Apr 2017 01:08:00 +0000</pubDate>
            <atom:updated>2017-04-04T21:32:10.439-04:00</atom:updated>
            <title>Java EE Adoption Story from Luqman Saeed</title>
            <description>One of the most important things to do at this stage of the life-cycle of Java EE is highlight successful adoption stories at a regular cadence. The community has been doing just that for a long time including at JavaOne. A number of these stories are curated &lt;a href=&quot;https://javaee-guardians.io/java-ee-adoption-stories/&quot;&gt;here&lt;/a&gt;. Luqman Saeed&amp;nbsp;recently agreed to share his Java EE adoption story. He has developed a number of production Java EE applications in his native Ghana. Luqman&amp;nbsp;had a number of insightful things to say about Java EE worth paying attention to. I have highlighted specific passages that really stand out.&lt;br /&gt;&lt;br /&gt;He had quite a bit to say on some of the most recent episodes of Java EE naysaying in certain parts of our &quot;colorful&quot; ecosystem.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Can you kindly introduce yourself?&lt;/b&gt;&lt;br /&gt;My name is Luqman Saeed, I am a blogger and I run &lt;a href=&quot;https://pedanticdevs.com/&quot;&gt;Pedantic Devs&lt;/a&gt;. I am the head of Finance and Administration for a plastic manufacturing company in Accra, Ghana. I learned programming as a hobby about seven years ago. I started with PHP and the Symfony framework.&lt;br /&gt;&lt;br /&gt;Back then, just like today, I read a lot of FUD about Java, and being quite an unusual person, I decided to find out what made the language such a lucrative bashing victim. I got hooked and have been doing Java since then.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Why did you choose Java EE? What applications have you written using Java EE?&lt;/b&gt;&lt;br /&gt;I used to write just a few simple GUI applications, mostly with Swing - and later JavaFX - for my day to day work activities. But about three and a half years ago, things got serious when I joined my current company and realized it lacked a reliable human resources and payroll program.&lt;br /&gt;&lt;br /&gt;I decided to develop one internally. After consultations with my CEO and other top management, we had the user requirements at hand. I weighed a lot of options for Java web application development. I got a myriad of opinions, with Spring being the favorite of all reviews I kept reading.&lt;br /&gt;&lt;br /&gt;However, Java EE 7 had been released at the same time, and a post by Adam Bien on his blog (I think it had to do with the simplest EJB component), got me curious. So I downloaded the Java EE tutorials, the specifications I was interested in and started reading.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;span style=&quot;color: #444444;&quot;&gt;&lt;i&gt;The more I read about Java EE, the more I got blown away by the simplicity and elegance of the platform.&lt;/i&gt;&lt;/span&gt;&lt;/b&gt; The more I also got convinced I had discovered the holy grail of Java software development.&lt;br /&gt;&lt;br /&gt;After about six months (including a hiatus of about two and a half months), I got my payroll system ready and deployed on GlassFish internally. Everyone was happy. I have since then developed a number of applications for some other companies, all on Java EE. All very easy to do.&lt;br /&gt;&lt;br /&gt;I am currently working on &lt;a href=&quot;https://nexpaygh.com/&quot;&gt;a larger more complex version&lt;/a&gt; of the HRMS I developed for my employer and using the JPA, Bean Validation, EJB, WebSockets APIs from the Java EE platform as well as Apache Shiro from Stormpath, the CDI extension &lt;a href=&quot;https://deltaspike.apache.org/&quot;&gt;Apache DeltaSpike&lt;/a&gt; and Dynamic Reports. I used Vaadin for the UI because it has a CDI add-on that integrates perfectly with Java EE and also writing my UIs in pure Java speeds things up. As anyone who pays attention knows, Java EE is quite large, and the beauty of it is you just use only what you need!&lt;br /&gt;&lt;br /&gt;&lt;b&gt;What was your general experience with Java EE? Would you choose it again?&lt;/b&gt;&lt;br /&gt;Like I stated above, Java EE was not only logical, it was also very straightforward to use. &lt;span style=&quot;color: #444444;&quot;&gt;&lt;i&gt;&lt;b&gt;I just need an application server and a single Maven dependency to get things going. The powerful, type-safe dependency injection that acts as the glue of the platform is what really blows my mind.&lt;/b&gt;&lt;/i&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;I find it quite amazing that with a simple change of a parameter from ‘annotated’ to ‘all’, I can magically @Inject any object I create. Wow. The first time I read the CDI specification, I was like OMG this is it. Literally. It just works, to borrow the popular Ubuntu aphorism.&lt;br /&gt;&lt;br /&gt;I have been using Java EE for a few years now and I will still choose it any day, any time. It is productive, expressive and powerful. I find myself being immediately productive. If I need to master something, I just go to the specification page, download it and spend a few nights reading it.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Some people have recently stated that they view Java EE to be &quot;obsolete&quot;. What do you make of that?&lt;/b&gt;&lt;br /&gt;I have recently been keenly following all the latest hype about &quot;microservices&quot; and the very negative campaign being led by some very interesting camps about how Java EE is obsolete, bloated and so on. Honestly I just laugh and go back to hacking on my Java EE projects.&lt;br /&gt;&lt;br /&gt;I feel the people bashing the platform either are just marketeers or just jump on the fad of the day, really. I can run a Java EE application by simply adding all the APIs to the application and do a java -jar. But why would I want to build an application server when there is one put together by very smart and knowledgeable people?&lt;br /&gt;&lt;br /&gt;Most of the &quot;application server is obsolete&quot; proponents try to make it look like using an application server is the only way to run a Java EE application. Or that the application server somehow gets in the way of implementing a microservice architecture.&lt;br /&gt;&lt;br /&gt;With projects like WildFly Swarm, I can even do fat-jars with ease if I want to. But personally I don’t know why all the noise over microservices in the first place because to me it’s been around in one form or another since before I was born.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;i&gt;&lt;span style=&quot;color: #444444;&quot;&gt;Java EE is a platform that is highly productive, expressive, powerful, open, easy to use, and very reliable.&lt;/span&gt;&lt;/i&gt;&lt;/b&gt; Java EE isn’t a &quot;brand&quot; per se, so the question of Java EE brand &quot;fading&quot; is for me a prima facie null question. If you ask me, Payara is a brand, WildFly is a brand, TomEE is a brand and WebSphere Liberty is a brand. I am just a lemme-mind-my-business happy Java EE platform user. I hardly have time to bother with the FUD.&lt;br /&gt;&lt;br /&gt;I also occasionally have CS students from a private university come to do internship with me and I - you guessed it - teach them Java EE. Java EE may be &quot;obsolete&quot; in the imaginary world of some people, but there are people like me in the real world, that don’t talk much, because we are happy users of the platform.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;How can people contact you if they have questions?&lt;/b&gt;&lt;br /&gt;I am more than happy to share my Java EE journey and experience with anyone. Just &lt;a href=&quot;https://pedanticdevs.com/contact&quot;&gt;contact me&lt;/a&gt; and I will be more than happy to speak. &lt;i&gt;&lt;b&gt;&lt;span style=&quot;color: #444444;&quot;&gt;Once again, I will choose Java EE any day, any time. It just works :-).&lt;/span&gt;&lt;/b&gt;&lt;/i&gt;</description>
            <link>http://blog.rahmannet.net/2017/04/java-ee-adoption-story-from-luqman-saeed.html</link>
            <author>noreply@blogger.com (Reza Rahman)</author>
            <thr:total>0</thr:total>
        </item>
        <item>
            <guid isPermaLink="false">tag:blogger.com,1999:blog-37157465.post-1481009315399493050</guid>
            <pubDate>Fri, 24 Mar 2017 23:07:00 +0000</pubDate>
            <atom:updated>2017-03-29T14:22:09.254-04:00</atom:updated>
            <title>DZone/Java EE Guardians Survey Results: Microservices</title>
            <description>As some of you are aware, the&amp;nbsp;&lt;a href=&quot;https://javaee-guardians.io/&quot;&gt;Java EE Guardians&lt;/a&gt;&amp;nbsp;and DZone jointly conducted a community survey to help determine Java EE 8 features prior to JavaOne 2016. You may also be aware that&amp;nbsp;&lt;a href=&quot;https://java.net/projects/javaee-spec/lists/users/archive/2016-09/message/0&quot;&gt;we shared the results of that survey with Oracle&lt;/a&gt;&amp;nbsp;before the details of the renewed Java EE 8 scope was announced. Now is a great time to start analyzing those results a bit more. I&#39;ve already done a&amp;nbsp;&lt;a href=&quot;http://blog.rahmannet.net/2017/01/dzonejava-ee-guardian-survey-results.html&quot;&gt;high level summary of the results&lt;/a&gt;. I&#39;ve also done a deeper dive into the responses for&amp;nbsp;&lt;a href=&quot;http://blog.rahmannet.net/2017/01/dzonejava-ee-guardians-survey-results.html&quot;&gt;HTTP/2 and Servlet 4&lt;/a&gt;,&amp;nbsp;&lt;a href=&quot;http://blog.rahmannet.net/2017/02/dzonejava-ee-guardians-survey-results.html&quot;&gt;Java SE 8 alignment&lt;/a&gt;&amp;nbsp;as well as&amp;nbsp;&lt;a href=&quot;http://blog.rahmannet.net/2017/03/dzonejava-ee-guardians-survey-results.html&quot;&gt;Java EE security&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;Besides asking about relatively straightforward Java EE 8 features, we asked a number of more complex, foundational questions towards the end of the survey. In the prior entry, in this entry and a subsequent few others I am going to take a closer look at some of these questions. I&#39;ll then return back to looking at the more mundane Java EE 8 feature specific questions. It will be clear in a few weeks why this change of order is important at the moment.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;The Question&lt;/b&gt;&lt;br /&gt;In the prior entry I looked at one of the most fundamental questions we asked -&amp;nbsp;&lt;a href=&quot;http://blog.rahmannet.net/2017/03/dzonejava-ee-guardians-survey-results_13.html&quot;&gt;the complex relationship between standards and innovation&lt;/a&gt;. If you have not yet read the entry, I think it is a good idea to take a look as vital context to the current entry. In this entry I&#39;ll explore the question we asked about standardizing microservices specific features in Java EE. This is a particularly important question that deserves a very in-depth look. It is certainly a question Oracle, vendors, the community and Java EE&#39;s usual antagonists are paying a lot of attention to so getting this right for everyone is crucial.&lt;br /&gt;&lt;br /&gt;Here is how we phrased the question:&lt;br /&gt;&lt;br /&gt;&quot;Microservices is a relatively vague term. It can be interpreted to mean decomposing a larger logical application into smaller independently deployable subsystems.&lt;br /&gt;&lt;br /&gt;There are frameworks that claim to specialize in microservices and include features such as custom configured, self-contained executable jars (also known as “fat jars” or “uber jars”), metrics, discovery, circuit breakers and bulkheads. Java EE currently does not include such features but it may make sense to add them. It should be noted however that Java EE centric tools such as WildFly Swarm, Payara Micro, WebSphere Liberty and KumuluzEE do offer such features.&lt;br /&gt;&lt;br /&gt;Keep in mind, there are some industry thinkers like Martin Fowler that have expressed doubt whether microservices make sense for most applications. Some other folks such as Adam Bien believe Java EE is already well suited to building practical microservices.&lt;br /&gt;&lt;br /&gt;How should Java EE approach microservices?&quot;.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;The Results&lt;/b&gt;&lt;br /&gt;The following graphic shows how the community responded. It&#39;s not realistic to think there would be a simple answer to a pretty complex question, but there are clear patterns. A sizable minority of 44% respondents want Java EE to standardize microservices specific features. The majority 56% however want to wait to standardize or do not want to standardize any further microservices features in Java EE. 27% believe Java EE already has sufficient support for building practical microservices applications. Though not entirely, my personal views most closely resemble this group. I&#39;ll explain myself a bit more later in this writeup. I&#39;ve also explained my views in &lt;a href=&quot;http://www.captechconsulting.com/videos/down-to-earth-microservices-with-vanilla-java-ee&quot;&gt;this screencast&lt;/a&gt;. A further 25% believe Java EE should wait to standardize anything more until microservices are better adopted in the practical enterprise. 4% believe microservices is just hype and should simply be ignored.&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://4.bp.blogspot.com/-wxilErnz5Zc/WM2dqDZFJVI/AAAAAAAAFJU/O2RGJh6ZdTcDtNT9hvHCONSvRFCwCo_ggCLcB/s1600/microservices_javaee.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;197&quot; src=&quot;https://4.bp.blogspot.com/-wxilErnz5Zc/WM2dqDZFJVI/AAAAAAAAFJU/O2RGJh6ZdTcDtNT9hvHCONSvRFCwCo_ggCLcB/s400/microservices_javaee.png&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;To put some of this into context, the level of support for standardizing microservices specific features is much weaker than standardizing features such as HTTP/2, more JSON, Java SE 8 alignment, Java EE security and dynamic configuration (some of these items enjoy near 90% support). Indeed the level of support was higher for the Java EE MVC API that has now been decoupled from Java EE and is being led by the community instead of Oracle. The level of support for microservices is essentially in line with standardizing features such as NoSQL and reactive programming.&lt;br /&gt;&lt;br /&gt;Digging a little deeper into the data, there is a high degree of correlation between folks that support more microservices features in Java EE right away and folks that equate Java EE to a product instead of an open standard or don&#39;t mind standardizing concepts that would very likely be considered&amp;nbsp;&lt;a href=&quot;https://blog.daftcode.pl/hype-driven-development-3469fc2e9b22&quot;&gt;Hype-Driven Development (HDD)&lt;/a&gt;&amp;nbsp;by most ordinary developers in the blue collar enterprise (the very readable, extremely unassuming and sensible HDD write-up tellingly includes microservices, NoSQL and reactive programming as prominent examples; if you haven&#39;t done so already, I highly recommend reading the linked article). In effect these folks would not agree with the &lt;a href=&quot;http://blog.rahmannet.net/2017/03/dzonejava-ee-guardians-survey-results_13.html&quot;&gt;currently fairly conservative&lt;/a&gt; approach to Java EE standardization.&lt;br /&gt;&lt;br /&gt;A majority of the people that put in comments essentially had a pretty ambivalent view of adding more microservices features to Java EE right now. Perhaps the folks that have decided to advocate microservices for a few years now without many reservations should pay heed to folks like these? Here is a representative sample of comments:&lt;br /&gt;&lt;ul&gt;&lt;li style=&quot;text-align: left;&quot;&gt;&quot;I believe microservices hype will eventually die down&quot;.&lt;/li&gt;&lt;li style=&quot;text-align: left;&quot;&gt;&quot;The hype is already fading. Wait a little and it will be replaced with the &#39;next big thing&#39;&quot;.&lt;/li&gt;&lt;li style=&quot;text-align: left;&quot;&gt;&quot;Stop the nonsense with uber jars and let a Java EE server have configurations that let the application define what modules are needed&quot;.&lt;/li&gt;&lt;li style=&quot;text-align: left;&quot;&gt;&quot;The success of Java EE centric tools like WildFly Swarm will dictate the need, or lack thereof, for standardization&quot;.&lt;/li&gt;&lt;li style=&quot;text-align: left;&quot;&gt;&quot;Java EE is well-suited to providing microservices. I am not at all convinced that WildFly Swarm&#39;s approach to service discovery, for example, is something that should be standardized - it makes sense in some use cases, but not others&quot;.&lt;/li&gt;&lt;li style=&quot;text-align: left;&quot;&gt;&quot;I would have picked standardizing fat jars from the first point. The others are just design patterns or good practices&quot;.&lt;/li&gt;&lt;li style=&quot;text-align: left;&quot;&gt;&quot;99% of applications won&#39;t need this. Only very large internet scale companies need microservices. Java EE is mostly used for corporate internal web applications (at least in my experience)&quot;.&lt;/li&gt;&lt;li style=&quot;text-align: left;&quot;&gt;&quot;Although I agree that Java EE already provides the minimum tools to create microservices I think it would be important to make some de-facto guidelines and tools. In particular I think it would be important to have a well-defined standard for self-contained executable jars&quot;.&lt;/li&gt;&lt;li style=&quot;text-align: left;&quot;&gt;&quot;Let the container developers (JBoss, GlassFish, etc) work on this for another couple of years and let it evolve&quot;.&lt;/li&gt;&lt;li style=&quot;text-align: left;&quot;&gt;&quot;WildFly Swarm should be the example to follow, by letting the &#39;just enough application server&#39; idea to settle&quot;.&lt;/li&gt;&lt;li style=&quot;text-align: left;&quot;&gt;&quot;I think the only big challenge is developing a how-to that integrates Java EE with a handful of other technologies to create a microservices architecture which is good enough for everyone else who&#39;s not Netflix&quot;.&lt;/li&gt;&lt;li style=&quot;text-align: left;&quot;&gt;&quot;Much of microservices is hype and is already experiencing some backlash&quot;.&lt;/li&gt;&lt;li style=&quot;text-align: left;&quot;&gt;&quot;For me microservices is an architecture. I think that Java EE as a platform should not be seen as a framework that follows some specific architecture principles&quot;.&lt;/li&gt;&lt;li style=&quot;text-align: left;&quot;&gt;&quot;Let&#39;s wait for MicroProfile and build something upon it&quot;.&lt;/li&gt;&lt;li style=&quot;text-align: left;&quot;&gt;&quot;JBoss like application servers already support modularity, which in many ways make servers lean. A similar kind of standards based approach will help anyone build microservices with their own feature sets enabled&quot;.&lt;/li&gt;&lt;li style=&quot;text-align: left;&quot;&gt;&quot;Microservices are excellent in some cases, but most enterprise systems don&#39;t really need microservices. Combine cloud and application server in the right way and we have microservices in the cloud&quot;.&lt;/li&gt;&lt;li style=&quot;text-align: left;&quot;&gt;&quot;We should just tell developers/architects (or maybe just management) that we&#39;re not all Netflix&quot;.&lt;/li&gt;&lt;li style=&quot;text-align: left;&quot;&gt;&quot;I agree with Martin Fowler that microservices are not already proven and also that they are not required for many applications&quot;.&lt;/li&gt;&lt;li style=&quot;text-align: left;&quot;&gt;&quot;I agree with Adam Bien. Supposedly &#39;lightweight&#39; solutions tend to become heavy over time. I do think it is great to have options so having WildFly Swarm, Payara Micro, etc is a good thing&quot;.&lt;/li&gt;&lt;li style=&quot;text-align: left;&quot;&gt;&quot;Microservices are hype, but can not be neglected. The main driver is actually to get more control of deployment and of configuration for developers. Java should provide mechanisms for that, which would be helpful regardless of whether microservices survives&quot;.&lt;/li&gt;&lt;li style=&quot;text-align: left;&quot;&gt;&quot;I would argue that Java EE fits nicely with microservices as it is today. It is more an architecture choice of style if you find monoliths or microservices a better fit for you&quot;.&lt;/li&gt;&lt;li style=&quot;text-align: left;&quot;&gt;&quot;I agree with Adam Bien that Java EE is already well suited and also with Fowler that microservices may not make sense to most applications&quot;.&lt;/li&gt;&lt;li style=&quot;text-align: left;&quot;&gt;&quot;Application servers with minimum required modules makes sense, but standards are probably not required&quot;.&lt;/li&gt;&lt;li style=&quot;text-align: left;&quot;&gt;&quot;None of the projects I&#39;ve worked on would have benefited from being decomposed into microservices&quot;.&lt;/li&gt;&lt;li style=&quot;text-align: left;&quot;&gt;&quot;Java EE already provides the tools for building microservices. I think it should only create new profiles for microservices which provide the principal JSRs&quot;.&lt;/li&gt;&lt;li style=&quot;text-align: left;&quot;&gt;&quot;Microservices are an architectural pattern, there is no need to standardize it in Java EE&quot;.&lt;/li&gt;&lt;li style=&quot;text-align: left;&quot;&gt;&quot;Java EE should not start to standardize all named features at once but maybe start with uber jars&quot;.&lt;/li&gt;&lt;li style=&quot;text-align: left;&quot;&gt;&quot;Time will bring more understanding and consensus as to what a standard should look like&quot;.&lt;/li&gt;&lt;li style=&quot;text-align: left;&quot;&gt;&quot;Java EE is already great for microservices development. Trust Adam Bien :-)&quot;.&lt;/li&gt;&lt;/ul&gt;&lt;b&gt;More Microservices Data Points&lt;/b&gt;&lt;br /&gt;I don&#39;t think there is any denying the fact that Oracle&#39;s own Java EE 8/9 survey was heavily (perhaps even solely) focused on microservices including the way the questions were phrased as well as the questions themselves (you should judge for yourself: the survey text and results are &lt;a href=&quot;https://java.net/projects/javaee-spec/downloads/download/Java%20EE%20Survey%20Results%20December%202016.pdf&quot;&gt;here&lt;/a&gt;). One would expect that support for microservices would be much higher in those results than our survey as a result. I don&#39;t think that is what actually happened. Most of the very microservice specific features such as service health, circuit breakers and modularity/fat-jars ranked below average (that is below 10 amongst 21 items surveyed, in order of importance). Indeed most of the items that ranked above a 4 were pretty mundane items like HTTP/2, REST, JSON, security and configuration. For context, 1 indicated &quot;Not Important&quot; while 5 indicated &quot;Very Important&quot;. Items such a reactive programming, eventual consistency and NoSQL all ranked between 3.5 and 4. &lt;br /&gt;&lt;br /&gt;Beyond our and Oracle&#39;s surveys, there is another excellence source of reliable public data we can look at on microservices. The 2016 RebelLabs survey understandably started including questions on microservices. The graphic below shows the results of the survey. Because of the complexity of the question patterns are harder to see but I think it&#39;s safe to say the results are mixed. After a few years of fever pitch hype, only 34% say they have moved to microservices. Of that percentage, only 40% said moving to microservices has had a benefit for them. In terms of total percentages, that&#39;s only 15% of developers realizing a practical benefit from microservices. There are also a troubling data points - 18% of &quot;early&quot; adopters reporting microservices have made life harder for them. Most - 42% - have not seen any real benefit to adopting microservices. Of non-adopters, 32% already say microservices are not for them while another 56% are basically still on the fence. &lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://4.bp.blogspot.com/-HeNzDq99DDI/WM2noZpRWUI/AAAAAAAAFJk/9O-aqUJjyVwuVXE6Co430PCDJ-1ghzonwCLcB/s1600/rebellabs_msa.jpg&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;400&quot; src=&quot;https://4.bp.blogspot.com/-HeNzDq99DDI/WM2noZpRWUI/AAAAAAAAFJk/9O-aqUJjyVwuVXE6Co430PCDJ-1ghzonwCLcB/s400/rebellabs_msa.jpg&quot; width=&quot;377&quot; /&gt;&lt;/a&gt;&lt;/div&gt;I think this is hardly the results to thrill the veritable chorus of vendors and &quot;industry thought leaders&quot; unabashedly cheerleading microservices for a while now. &lt;br /&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;b&gt;Hype and Reality&lt;/b&gt;&lt;br /&gt;The fact that ordinary developers still continue to have mixed feelings about microservices is not a surprise either to me or most folks I know personally in the community. There has been and continues to be a steady stream of people duly warning against the hype. One has to give due credit to Martin Fowler. He was one of the earliest prominent folks to write about microservices but he is also one of the earliest folks to &lt;a href=&quot;https://martinfowler.com/bliki/MicroservicePremium.html&quot;&gt;warn about the hype&lt;/a&gt;. I don&#39;t think you can get any clearer about what is going on than saying &quot;enough to get everyone&#39;s over-hyped-bulls*#%&amp;nbsp;detector up and flashing&quot; or &quot;the majority of software systems should be built as a single monolithic application&quot;. There have even been some pretty brave folks on the vendor side on the equation. Ruby on Rails creator&amp;nbsp;David Heinemeier Hansson wrote an excellent blog entry titled &quot;&lt;a href=&quot;https://m.signalvnoise.com/the-majestic-monolith-29166d022228&quot;&gt;The Majestic Monolith&lt;/a&gt;&quot; that is well worth reading for all server-side developers. My friend and fellow Java EE enthusiast Adam Bien has even gone as far as to making a fairly bold prediction of a &lt;a href=&quot;http://www.adam-bien.com/roller/abien/entry/2017_predictions&quot;&gt;backlash against microservices and uber jars&lt;/a&gt; as soon as this year. There is plenty more around once you begin looking including some humorous but pretty insightful memes from ordinary folks.&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://4.bp.blogspot.com/-q6637rsDGxM/WNgG-P4EN0I/AAAAAAAAFKE/GvDp38qUkakMyUeO_DY8IZKKqZMvcK2fQCLcB/s1600/microservices_answer.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;140&quot; src=&quot;https://4.bp.blogspot.com/-q6637rsDGxM/WNgG-P4EN0I/AAAAAAAAFKE/GvDp38qUkakMyUeO_DY8IZKKqZMvcK2fQCLcB/s400/microservices_answer.png&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://3.bp.blogspot.com/-boNXDnjVo-c/WNgHER725ZI/AAAAAAAAFKI/CZur7TH6McMbik--NsHvdTgXkcev6HeQwCLcB/s1600/microservices_murder.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;202&quot; src=&quot;https://3.bp.blogspot.com/-boNXDnjVo-c/WNgHER725ZI/AAAAAAAAFKI/CZur7TH6McMbik--NsHvdTgXkcev6HeQwCLcB/s400/microservices_murder.png&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://2.bp.blogspot.com/-j-2kMACTApQ/WNgHJCGL7mI/AAAAAAAAFKM/Vi779UUeEoo2s5bB18KkI_5ZUGHDwNgxACLcB/s1600/microservices_nomenclature.jpg&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;400&quot; src=&quot;https://2.bp.blogspot.com/-j-2kMACTApQ/WNgHJCGL7mI/AAAAAAAAFKM/Vi779UUeEoo2s5bB18KkI_5ZUGHDwNgxACLcB/s400/microservices_nomenclature.jpg&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;It is safe to say like these folks, I don&#39;t mind being called a microservices skeptic. While I&#39;m sure it doesn&#39;t help our egos much, I don&#39;t think most companies have the same problems as Netflix, Amazon or Google (and yes, that includes most Fortune 500s). For the vast majority of applications out there, microservices seriously violate the &lt;a href=&quot;https://martinfowler.com/bliki/Yagni.html&quot;&gt;YAGNI&lt;/a&gt;&amp;nbsp;principle - the associated costs and complexities are just not worth it and never will be. My general rule of thumb for considering microservices for most real world projects is a team size of about 7-10 active developers.&lt;br /&gt;&lt;br /&gt;For projects that can actually benefit from microservices, the &quot;micro&quot; part of microservices still violates the YAGNI principle. Indeed what makes sense is breaking these systems down into pretty sizable sub-systems with distinct sets of business users. An example would be a larger insurance system that is broken down into point-of-sale, data capture, underwriting, policy management, payments, customer service, reporting, archival, etc sub-systems. The reality is that many of us have been successfully developing both these types of &quot;microservices&quot; applications in addition to monolithic applications with vanilla Java EE &lt;a href=&quot;https://javaee-guardians.io/java-ee-adoption-stories&quot;&gt;for a long time now&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;This pragmatic approach is far away from the CORBA-like remote objects most microservices proponents seem to have an infatuation with where you would see dozens if not hundreds of distributed remote services comprising an application like account service, product service, user service or order service. There are only a tiny handful of companies that actually benefit from this level of granularity. These are the types of applications that really need the features that are offered by products like &lt;a href=&quot;http://wildfly-swarm.io/&quot;&gt;WildFly Swarm&lt;/a&gt; or &lt;a href=&quot;https://ee.kumuluz.com/&quot;&gt;KumuluzEE&lt;/a&gt; beyond what vanilla Java EE already offers. I&#39;ve explained all of this in a fair amount of detail beyond what I have the space to say here in the &lt;a href=&quot;http://www.captechconsulting.com/videos/down-to-earth-microservices-with-vanilla-java-ee&quot;&gt;screencast&lt;/a&gt; I referenced earlier in this entry.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;What Should be Done in Java EE?&lt;/b&gt;&lt;br /&gt;Whatever the right thing to do in Java EE is, Java EE vendors should not let microservices hype pass them by. They should absolutely make sure their Java EE centric products are microservices &quot;buzzword compliant&quot;. Part of the issue is that it will take a while for pseudo-technical people in IT decision making roles that nonetheless hold CIO, CTO, architect and development manager titles (some of us lovingly call these people &quot;PowerPoint Architects&quot;; I&#39;m sure you know the type) to be able to separate the hype vs. reality of microservices. Some may only learn the hard way by experiencing project failures, cost overruns and maintenance headaches themselves. We have to be honest with the fact that Java EE is not completely immune from the need for buzzword compliance either. That said if Java EE capitulates every time the hype of the day came along, it would quickly lose it&#39;s &lt;a href=&quot;http://blog.rahmannet.net/2017/03/dzonejava-ee-guardians-survey-results_13.html&quot;&gt;well-recognized&amp;nbsp;core value proposition&lt;/a&gt;&amp;nbsp;as a stable, backwards-compatible open standard that serves as a buffer against hype and minimalist core for broad ecosystem innovation (indeed this is precisely what went wrong in the J2EE era).&lt;br /&gt;&lt;br /&gt;I really don&#39;t think most of the features that Oracle is proposing for Java EE 9 really should be standardized yet. This includes things like dynamic discovery, metrics, circuit breakers, client-side load-balancing, eventual consistency and so on. Just as is the case with WildFly Swarm and KumuluzEE, at this stage vendors should be actively innovating with and building on top of Java EE for these sorts of features. Collaboration on microservices features through open source initiatives like &lt;a href=&quot;http://microprofile.io/&quot;&gt;MicroProfile&lt;/a&gt; is also an extremely good thing. This approach allows for the usability and applicability of these features to be much better understood and allows ample space for the ecosystem to fully innovate before any standardization takes place. Maintaining a product-first approach also means these features get to developers faster, as they need to meet (real or imagined) needs. Mutual collaboration through MicroProfile also allows for rapid standardization later when the time is right. On the other hand, if the microservices ambivalence now in conference talks like &quot;Microservices for Mere Mortals&quot; and &quot;The Dark Side of Microservices&quot; turns into a full-scale grassroots backlash down the road, these features need never be standardized in Java EE. I&#39;d say the biggest problem now is that Oracle is not part of MicroProfile and does not have an open, collaborative microservices product plan outside of what they said they wish to do in Java EE 9.&lt;br /&gt;&lt;br /&gt;None of the above means there aren&#39;t features that shouldn&#39;t be moved forward in the core open standard. There are plenty of more straightforward Java EE features that I think would be welcomed well by the community:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Features like dynamic configuration and OAuth/OpenID support have been relatively well-awaited, are reasonably well-understood would be useful for projects whether they are using microservices or not. &amp;nbsp;Oracle initially considered these features for Java EE 8 but then appears to have deferred these features to Java EE 9 in order to deliver Java EE 8 faster (a welcome move).&lt;/li&gt;&lt;li&gt;Considerations to fully modularize the platform has been around since the Java EE 6 timeframe. The big practical hurdle to doing this was the fact that Java did not have a built-in module system. I have to be honest in that I think modularity is a bit of a Red Herring overused in the usual anti-Java EE rhetoric. I&#39;ll write more about this in a slightly different context in the next few weeks but I don&#39;t think modularizing Java EE is a practical issue when the average Web Profile implementation is 35-50 MB and the average full profile modern Java EE application server is 120-150 MB. Let&#39;s remember that the commodity disk space these days is approaching the terabyte range and an average network speed of over 10 mpbs is really not that uncommon anymore (I do have to admit there continue to remain real disk size offenders such as WebLogic at 800 MB - 1.5 GB). That all said, Java SE 9 modularity makes modularizing Java EE along the lines of it&#39;s already separated constituent JSRs a real possibility and something that would be welcomed by many. This feature does have a real use case in very resource constrained embedded systems/IoT use cases. Indeed much of this has been possible in modular application servers like GlassFish since the Java EE 6 time frame.&lt;/li&gt;&lt;li&gt;To go along with modularity, it would be useful to have additional profiles in Java EE. For example a very minimal Servlet-only &quot;Core Profile&quot; and a &quot;Microservices Profile&quot; targeting a simple, non-persistent but JSON-capable REST endpoint certainly makes sense. This is very similar to what was done with &lt;a href=&quot;http://www.oracle.com/technetwork/java/embedded/resources/tech/compact-profiles-overview-2157132.html&quot;&gt;Java SE 8 Compact Profiles&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;Similar to modularity, I don&#39;t think fat-jars are as cut-and-dry as most people seem to think. In fact I think Adam Bien might be right that &lt;a href=&quot;http://andymrb.blogspot.co.uk/2017/03/uber-jars-vs-thin-wars-pros-and-cons.html&quot;&gt;fat jars can prove to be an actual anti-pattern with Docker compared to Java EE thin war files&lt;/a&gt;&amp;nbsp;with time. That said, embeddable containers have been advocated for a long time in the Java EE expert group. I do think standardizing fat jars would be welcome by many in the community. Again, most application servers other than WebLogic already have this capability now. They do have a legitimate use case when working with bare metal JVM based PaaS environments that make a separate server installation difficult.&lt;/li&gt;&lt;/ul&gt;Going forward, the positions in this section is what I plan to personally advocate in the Java EE expert group. That said, there is always ample room for learning more in our ever volatile industry and perhaps my views will evolve over time as things continue to move forward. &lt;br /&gt;&lt;br /&gt;I do hope this post serves as food for thought in the complex topic of Java EE and microservices. Please do stay tuned as I further look at topics in the survey. In addition to my write-up, I would encourage you to look at the survey results yourself and get involved in Java EE. You can certainly do so by becoming a part of the&amp;nbsp;&lt;a href=&quot;https://javaee-guardians.io/&quot;&gt;Java EE Guardians&lt;/a&gt;.</description>
            <link>http://blog.rahmannet.net/2017/03/dzonejava-ee-guardians-survey-results_24.html</link>
            <author>noreply@blogger.com (Reza Rahman)</author>
            <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://4.bp.blogspot.com/-wxilErnz5Zc/WM2dqDZFJVI/AAAAAAAAFJU/O2RGJh6ZdTcDtNT9hvHCONSvRFCwCo_ggCLcB/s72-c/microservices_javaee.png" height="72" width="72"/>
            <thr:total>2</thr:total>
        </item>
        <item>
            <guid isPermaLink="false">tag:blogger.com,1999:blog-37157465.post-8199264193985579213</guid>
            <pubDate>Sat, 18 Mar 2017 23:20:00 +0000</pubDate>
            <atom:updated>2017-03-18T19:20:54.946-04:00</atom:updated>
            <title>JAX-RS 2.1 Early Draft Review Starts Now!</title>
            <description>JAX-RS 2.1 just posted it&#39;s first early draft review. Because of the now accelerated Java EE 8 schedule, the rest of the steps towards finalization of the specification is going to happen very quickly.&lt;br /&gt;&lt;br /&gt;As the release versioning indicates, this is a relatively minor JAX-RS release. However there are a few very important changes in the release both for JAX-RS users and server-side Java developers at large. Besides smaller grain items, these are the major changes in JAX-RS 2.1:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;The introduction of reactive capabilities in the JAX-RS client API. This is largely based on the Java SE 8 CompletableFuture API but the way the changes are designed most JAX-RS providers will also provide native support for RxJava. In essence this change allows for far more robust asynchronous, non-blocking, functional and composable REST endpoint invocations via the JAX-RS client API.&lt;/li&gt;&lt;li&gt;The addition of HTML 5 Server-Sent Events (SSE) support both on the JAX-RS server and client side API. Jersey had long added such support in it&#39;s proprietary API in the Java EE 7 timeframe. This change further improves HTML 5 alignment for JAX-RS and Java EE.&lt;/li&gt;&lt;li&gt;Although it is not included in the early draft review, JAX-RS 2.1 is set to add non-blocking IO (NIO) support. Unlike the Servlet API which supports both asynchrony and NIO, JAX-RS so far only added asynchronous support as of JAX-RS 2. The JAX-RS 2.1 expert group is now currently actively working on the changes for NIO support. It should make it into the next specification draft.&lt;/li&gt;&lt;/ul&gt;At the moment the best way to learn more about what is in JAX-RS 2.1 is looking at the &lt;a href=&quot;http://download.oracle.com/otndocs/jcp/jaxrs-2_1-edr-spec/index.html&quot;&gt;specification draft itself&lt;/a&gt;. Page 81 of the document has a nice log of changes since JAX-RS 2. Pages 36-38 describe reactive client support. SSE support is described in pages 57-60.&lt;br /&gt;&lt;br /&gt;While the specification is going to finalize soon, there are still plenty of reasons to get involved. Here are the many ways you can still engage (most of this comes directly from the &lt;a href=&quot;https://glassfish.java.net/adoptajsr&quot;&gt;Adopt-a-JSR page&lt;/a&gt; I drafted while still at Oracle):&lt;br /&gt;&lt;ul&gt;&lt;li&gt;You can still join the specification itself as an expert or a contributor. You can do that via the &lt;a href=&quot;https://www.jcp.org/en/jsr/detail?id=370&quot;&gt;JCP page for the specification&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;You can have your JUG officially support the standard through &lt;a href=&quot;https://community.oracle.com/community/java/jcp/adopt-a-jsr&quot;&gt;Adopt-a-JSR&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;You can simply join the discussion without any ceremony by subscribing to the &lt;a href=&quot;https://java.net/projects/jax-rs-spec/lists&quot;&gt;JAX-RS specification user alias&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;You can share ideas and feedback, possibly by entering issues in the &lt;a href=&quot;https://java.net/jira/browse/JAX_RS_SPEC&quot;&gt;public issue tracker&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;You can read the draft specification now.&lt;/li&gt;&lt;li&gt;You can try out the reference implementation now.&lt;/li&gt;&lt;li&gt;You can write or speak about the API now.&lt;/li&gt;&lt;li&gt;You can encourage others to participate.&lt;/li&gt;&lt;/ul&gt;The next step is up to you. You can be a part of the effort to keep moving forward the popular JAX-RS specification. If you have any questions I am happy to try to help - just drop me a note any time.</description>
            <link>http://blog.rahmannet.net/2017/03/jax-rs-21-early-draft-review-starts-now.html</link>
            <author>noreply@blogger.com (Reza Rahman)</author>
            <thr:total>0</thr:total>
        </item>
        <item>
            <guid isPermaLink="false">tag:blogger.com,1999:blog-37157465.post-6836146160689267447</guid>
            <pubDate>Fri, 17 Mar 2017 19:50:00 +0000</pubDate>
            <atom:updated>2017-03-17T16:06:49.996-04:00</atom:updated>
            <title>Vaadin Community Survey Confirms Java EE Used More Broadly Than Alternatives</title>
            <description>For those unaware, Vaadin is a popular GWT based RIA Java web framework. You may also be surprised that the Vaadin community is&amp;nbsp;150,000+ strong. To better understand this community the Vaadin folks fairly recently &lt;a href=&quot;https://vaadin.com/blog/-/blogs/vaadin-community-survey-learn-more-about-our-users-&quot;&gt;ran a survey&lt;/a&gt;. One of the things the Vaadin folks wanted to know is how often Java EE is used compared to alternatives. The results of the survey certainly look encouraging for Java EE, particularly given the seemingly perpetual nay-saying around Java and Java EE in predicable corners of our ever &quot;colorful&quot; industry.&lt;br /&gt;&lt;br /&gt;The results for Java EE usage are shown in the graphic below. The most number of respondents - 41% - identified themselves as Java EE users. I think this is truly remarkable for a mature open standard like Java EE with a number of non-standard product vendors aggressively positioning themselves as competitors to Java EE for many years now. The relatively sizable 27% of respondents that indicated &quot;other&quot; is also quite interesting. It is possible these folks simply use Vaadin as their primary server-side toolset.&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://2.bp.blogspot.com/-3NPTmDFb5NI/WMw2qg0BwAI/AAAAAAAAFI8/mF6SsRPEzQ4HtF7f-rplzn5vtmZ9r0JagCLcB/s1600/vaadin_javaee.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;400&quot; src=&quot;https://2.bp.blogspot.com/-3NPTmDFb5NI/WMw2qg0BwAI/AAAAAAAAFI8/mF6SsRPEzQ4HtF7f-rplzn5vtmZ9r0JagCLcB/s400/vaadin_javaee.png&quot; width=&quot;390&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;/div&gt;It is important to note though that the sample size is significant but small -&amp;nbsp;250+. That said, the survey is very reliable in one very important way. The survey was not anonymous/online but was from known and clearly identifiable members of the Vaadin community. This certainly helps reduce but not completely eliminate possible self-selection bias in an online survey. It&#39;s also remarkable how similar these results are to other larger surveys from reliable, neutral sources (the DZone survey results are in the graphic below). The survey illuminates some other interesting but somewhat predictable findings - I would encourage you to look at the &lt;a href=&quot;https://vaadin.com/blog/-/blogs/vaadin-community-survey-learn-more-about-our-users-&quot;&gt;entire survey results&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://1.bp.blogspot.com/-BvO3SObcoZw/WJYtuWJqcqI/AAAAAAAAE94/0yWWxxhwqO02ayOmDHPea1rAsY_96n1OgCLcB/s1600/dzone_javaee7.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;113&quot; src=&quot;https://1.bp.blogspot.com/-BvO3SObcoZw/WJYtuWJqcqI/AAAAAAAAE94/0yWWxxhwqO02ayOmDHPea1rAsY_96n1OgCLcB/s400/dzone_javaee7.png&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;While the Java EE platform has long included JSF as it&#39;s primary web framework, I personally know of a good number of folks that actually use Vaadin with Java EE. Indeed I&#39;d say it is one of the best if not the best RIA web framework out there (although I must admit I am a fan of PrimeFaces as an alternative to mucking around with JavaScript). It is really nice that Vaadin has long included &lt;a href=&quot;https://vaadin.com/javaee&quot;&gt;strong support for Java EE&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;While all of this is good news, the Java EE community can ill afford to rest on it&#39;s laurels. The community has hard work ahead of it as always to continue to serve developers of all stripes.&amp;nbsp;&lt;span style=&quot;text-align: center;&quot;&gt;On behalf of the Java EE Guardian community it is only correct to thank everyone that indicate their support for Java EE in such surveys. Our volunteer driven work is intended to benefit you first and foremost - it is good to see that intent does not get lost in the muddle.&lt;/span&gt;</description>
            <link>http://blog.rahmannet.net/2017/03/vaadin-community-survey-confirms-java.html</link>
            <author>noreply@blogger.com (Reza Rahman)</author>
            <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://2.bp.blogspot.com/-3NPTmDFb5NI/WMw2qg0BwAI/AAAAAAAAFI8/mF6SsRPEzQ4HtF7f-rplzn5vtmZ9r0JagCLcB/s72-c/vaadin_javaee.png" height="72" width="72"/>
            <thr:total>0</thr:total>
        </item>
        <item>
            <guid isPermaLink="false">tag:blogger.com,1999:blog-37157465.post-205598645652110123</guid>
            <pubDate>Thu, 16 Mar 2017 19:37:00 +0000</pubDate>
            <atom:updated>2017-03-16T15:47:06.898-04:00</atom:updated>
            <title>Java EE Security Early Draft Review Starts Now!</title>
            <description>The Java EE Security API just posted it&#39;s first early draft review. Because of the now accelerated Java EE 8 schedule, the rest of the steps towards finalization of the specification is going to happen very quickly.&lt;br /&gt;&lt;br /&gt;Java EE security is one of the &lt;a href=&quot;http://blog.rahmannet.net/2017/03/dzonejava-ee-guardians-survey-results.html&quot;&gt;most anticipated changes&lt;/a&gt; in Java EE 8. This is the case particularly because security is one of the last areas left to be revamped in the way most other Java EE APIs such as EJB 3 have been changed radically. As a result Java EE security is very highly dependent on things like vendor-specific GUI console wizards, vendor-specific configuration or command-line administrative tools. Pluggability, extensibility and customization is also currently challenging when the security features that already come with the application server are not sufficient. This is the main reason for the existence of third-party security frameworks in server-side Java like Shiro and Keycloak. The Java EE Security API aims to solve these important issues and promote both simplicity as well as portability, particularly on the cloud.&lt;br /&gt;&lt;br /&gt;The best way to learn more about what is in the specification is looking at the &lt;a href=&quot;http://download.oracle.com/otndocs/jcp/java_ee_security-1_0-edr-spec/index.html&quot;&gt;specification draft itself&lt;/a&gt;. Another great way to get yourself familiarized is looking at the slide deck from key expert group member and my friend Rudy De Busscher (please &lt;a href=&quot;https://www.slideshare.net/rdebusscher/what-is-tackled-in-the-java-ee-security-api-java-ee-8&quot;&gt;click here&lt;/a&gt; if you can&#39;t see the embedded deck).&lt;br /&gt;&lt;br /&gt;&lt;center&gt;&lt;iframe allowfullscreen=&quot;&quot; frameborder=&quot;0&quot; height=&quot;485&quot; marginheight=&quot;0&quot; marginwidth=&quot;0&quot; scrolling=&quot;no&quot; src=&quot;https://www.slideshare.net/slideshow/embed_code/key/HKAFFzxjcEvTQq&quot; style=&quot;border-width: 1px; border: 1px solid #ccc; margin-bottom: 5px; max-width: 100%;&quot; width=&quot;595&quot;&gt; &lt;/iframe&gt; &lt;div style=&quot;margin-bottom: 5px;&quot;&gt;&lt;strong&gt; &lt;a href=&quot;https://www.slideshare.net/rdebusscher/what-is-tackled-in-the-java-ee-security-api-java-ee-8&quot; target=&quot;_blank&quot; title=&quot;What is tackled in the Java EE Security API (Java EE 8)&quot;&gt;What is tackled in the Java EE Security API (Java EE 8)&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&quot;https://www.slideshare.net/rdebusscher&quot; target=&quot;_blank&quot;&gt;Rudy De Busscher&lt;/a&gt;&lt;/strong&gt;&lt;/div&gt;&lt;/center&gt;While the specification is going to finalize soon, there are still plenty of reasons to get involved. Indeed this has been one of the most heavily community driven Java EE 8 specifications. Here are the many ways you can still engage (most of this comes directly from the &lt;a href=&quot;https://glassfish.java.net/adoptajsr&quot;&gt;Adopt-a-JSR page&lt;/a&gt; I drafted while still at Oracle):&lt;br /&gt;&lt;ul&gt;&lt;li&gt;You can still join the specification itself as an expert or a contributor. You can do that via the &lt;a href=&quot;https://www.jcp.org/en/jsr/detail?id=375&quot;&gt;JCP page for the specification&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;You can have your JUG officially support the standard through &lt;a href=&quot;https://community.oracle.com/community/java/jcp/adopt-a-jsr&quot;&gt;Adopt-a-JSR&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;You can simply join the discussion without any ceremony by subscribing to the &lt;a href=&quot;https://java.net/projects/javaee-security-spec/lists&quot;&gt;Java EE Security API specification user alias&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;You can share ideas and feedback, possibly by entering issues in the &lt;a href=&quot;https://java.net/jira/browse/JAVAEE_SECURITY_SPEC&quot;&gt;public issue tracker&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;You can read the draft specification now.&lt;/li&gt;&lt;li&gt;You can try out the &lt;a href=&quot;https://github.com/javaee-security-spec&quot;&gt;reference implementation&lt;/a&gt; now.&lt;/li&gt;&lt;li&gt;You can write or speak about the API now.&lt;/li&gt;&lt;li&gt;You can encourage others to participate.&lt;/li&gt;&lt;/ul&gt;The next step is up to you. You can be a part of the effort to simplify and improve security in server-side Java. If you have any questions I am happy to try to help - just drop me a note any time.</description>
            <link>http://blog.rahmannet.net/2017/03/java-ee-security-early-draft-review.html</link>
            <author>noreply@blogger.com (Reza Rahman)</author>
            <thr:total>0</thr:total>
        </item>
        <item>
            <guid isPermaLink="false">tag:blogger.com,1999:blog-37157465.post-288910642109694032</guid>
            <pubDate>Mon, 13 Mar 2017 22:04:00 +0000</pubDate>
            <atom:updated>2017-03-24T14:31:16.080-04:00</atom:updated>
            <title>DZone/Java EE Guardians Survey Results: Standards and Innovation</title>
            <description>As some of you are aware, the &lt;a href=&quot;https://javaee-guardians.io/&quot;&gt;Java EE Guardians&lt;/a&gt; and DZone jointly conducted a community survey to help determine Java EE 8 features prior to JavaOne 2016. You may also be aware that &lt;a href=&quot;https://java.net/projects/javaee-spec/lists/users/archive/2016-09/message/0&quot;&gt;we shared the results of that survey with Oracle&lt;/a&gt; before the details of the renewed Java EE 8 scope was announced. Now is a great time to start analyzing those results a bit more. I&#39;ve already done a &lt;a href=&quot;http://blog.rahmannet.net/2017/01/dzonejava-ee-guardian-survey-results.html&quot;&gt;high level summary of the results&lt;/a&gt;. I&#39;ve also done a deeper dive into the responses for &lt;a href=&quot;http://blog.rahmannet.net/2017/01/dzonejava-ee-guardians-survey-results.html&quot;&gt;HTTP/2 and Servlet 4&lt;/a&gt;,&amp;nbsp;&lt;a href=&quot;http://blog.rahmannet.net/2017/02/dzonejava-ee-guardians-survey-results.html&quot;&gt;Java SE 8 alignment&lt;/a&gt;&amp;nbsp;as well as &lt;a href=&quot;http://blog.rahmannet.net/2017/03/dzonejava-ee-guardians-survey-results.html&quot;&gt;Java EE security&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;Besides simply asking about Java EE 8 features, we asked a number of fundamental questions towards the end of the survey that go to the core of Java EE itself. In this entry and a subsequent few others I am going to take a closer look at some of these questions. I&#39;ll then return back to looking at the more mundane Java EE 8 feature specific questions. It will be clear in a few weeks why this change of order is important at the moment.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;The Question&lt;/b&gt;&lt;br /&gt;One of the most important fundamental questions we asked is around the complex relationship between standards and innovation. This question and its responses deserve a particularly in-depth look.&lt;br /&gt;&lt;br /&gt;Here is how we phrased the question:&lt;br /&gt;&lt;br /&gt;&quot;Innovation and standardization is a tricky balance. Standards are pervasive, heavily relied upon and often strongly backwards compatible. For these reasons standards generally only include clearly proven ideas and avoid unproven ones. One can argue EJB 2 Entity Beans were an unproven innovation that was standardized too quickly. The Java EE ecosystem can always innovate ideas that are later standardized when proven.&lt;br /&gt;&lt;br /&gt;That being said, standardization is an engineering activity and inevitably includes some level of innovation. It may also be the case that Java EE is different in terms of an open standard as it heavily competes with non-standard technologies.&lt;br /&gt;&lt;br /&gt;How should Java EE approach innovation?&quot;.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;The Results&lt;/b&gt;&lt;br /&gt;The following graphic shows how the community responded. It&#39;s not realistic to think there would be a simple answer to a pretty complex question, but there are clear patterns. The most number of respondents (43%) essentially agreed with long-standing Java EE expert group consensus. Specifically this means taking a relatively conservative, organic approach to standardization. A further 14% favored a very conservative approach to standardization, forming a significant but not overwhelming majority. About 21% respondents had essentially the opposite view, equating Java EE with non-standard products. For context, this would basically mean standardizing features in products that are rarely used even by their own users. A further 23% favored a slightly more conservative approach that is still OK with standardizing ideas that are yet unproven. For context, these are most concepts that would very likely be considered &lt;a href=&quot;https://blog.daftcode.pl/hype-driven-development-3469fc2e9b22&quot;&gt;Hype-Driven Development (HDD)&lt;/a&gt;&amp;nbsp;by most ordinary developers in the blue collar enterprise (the very readable, extremely unassuming and sensible HDD write-up tellingly includes microservices and reactive programming as prominent examples; if you haven&#39;t done so already, I highly recommend reading the linked article).&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://3.bp.blogspot.com/-zMLSvzVTeuM/WMWvxyuUxwI/AAAAAAAAFIg/3PVK0Tpz07IhdR8iilKkKov6WqkNuf8ygCLcB/s1600/innovation.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;192&quot; src=&quot;https://3.bp.blogspot.com/-zMLSvzVTeuM/WMWvxyuUxwI/AAAAAAAAFIg/3PVK0Tpz07IhdR8iilKkKov6WqkNuf8ygCLcB/s400/innovation.png&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;People that put in comments for the most part supported the existing Java EE approach to standardization. Here is a representative sample:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&quot;Focus on reliability and long-term planning, Java is the backbone of many enterprises&quot;&lt;/li&gt;&lt;li&gt;&quot;I do not believe that Java EE should introduce any wildly new concepts or approaches&quot;&lt;/li&gt;&lt;li&gt;&quot;Stability is way more important than college kids&#39; untested and unproven ideas&quot;&lt;/li&gt;&lt;li&gt;&quot;Considering the purpose of Java EE in the first place, only those innovations should be considered that reduce bugs, increase stability, keep backward compatibility and reduce cost&quot;&lt;/li&gt;&lt;li&gt;&quot;The most valuable thing about Java is that it&#39;s backwards compatible, so innovations should be standardized very carefully. Innovations are to be provided by libraries, frameworks, etc&quot;&lt;/li&gt;&lt;li&gt;&quot;I firmly believe in Java EE as a robust, reliable, base stack upon which to build the rest of your tech stack. As such, I don&#39;t really think innovation should be seen much in it&#39;s purvey. Let third party libraries, frameworks, and vendor-specific features take charge of innovation. Meanwhile, the Java EE specs should keep making sure to standardize as much of the proven ideas as possible to allow communities to disengage from specific implementations as much as possible&quot;&lt;/li&gt;&lt;li&gt;&quot;I see standardization as a final step of a lengthy engineering process. Changing a standard after it gets established is always difficult and if it is frequently required, it&#39;ll be quite counterproductive&quot;&lt;/li&gt;&lt;li&gt;&quot;Since standards are there to last at least for a few years, I prefer a more conservative approach&quot;&lt;/li&gt;&lt;li&gt;&quot;It is important for Java EE to try to limit it&#39;s scope only to proven ideas and make them standards. For all other ideas there is always the possibility to evolve as open projects and once they prove they are good Java EE can adopt them&quot;&lt;/li&gt;&lt;li&gt;&quot;Our industry is full of hype, it is a decease. Java EE should be free from it&quot;&lt;/li&gt;&lt;li&gt;&quot;Let the industry innovate...then standardize later. Don&#39;t discourage the use of non-standard libraries&quot;&lt;/li&gt;&lt;li&gt;&quot;For me, standardization is a refining activity, which means to take the best approaches and bind them together in a way that makes sense and eases developers&#39; work. Innovation for innovation&#39;s sake is not worth the effort since it takes resources away from other areas that need improvement&quot;&lt;/li&gt;&lt;li&gt;&quot;Java EE should be conservative&quot;&lt;/li&gt;&lt;li&gt;&quot;Innovations may be provided by vendors, no need to standardize them&quot;&lt;/li&gt;&lt;li&gt;&quot;One of the selling points for Java EE is the stability and robustness. If we start to introduce the innovation-of-the-day into Java EE, then we will threaten that stability&quot;&lt;/li&gt;&lt;li&gt;&quot;There can be innovation on top of Java EE. Once they are proven - and if found necessary - they can be included as standards later on&quot;&lt;/li&gt;&lt;li&gt;&quot;I&#39;m all for new ideas, but if they&#39;re going to make it into Java EE, the reason needs to be that people actually need them. Not just because X is the latest buzzword&quot;&lt;/li&gt;&lt;/ul&gt;&lt;b&gt;Java EE Innovation Approach in Context&lt;/b&gt;&lt;br /&gt;To understand the real significance of the current implicitly conservative approach to Java EE standardization, it is important to have some context.&lt;br /&gt;&lt;br /&gt;I don&#39;t think it surprises ordinary enterprise developers that technology vendors do not behave very responsibly when it comes to hype. Although there are &lt;a href=&quot;https://m.signalvnoise.com/the-majestic-monolith-29166d022228&quot;&gt;a few brave souls&lt;/a&gt;, many do not have the correct incentives to self-regulate responsibly against hype. Even the ones that actually do have some good intentions are often slaves to their own egos, groupthink and isolation from down-to-earth blue collar enterprise development. Indeed grossly exaggerating the real world applicability (and consequent profitability) for startup(ish) ideas has become a such a &lt;a href=&quot;http://www.latimes.com/business/hiltzik/la-fi-hiltzik-disrupted-lyons-20160429-snap-htmlstory.html&quot;&gt;habitual problem in Silicon Valley in recent years&lt;/a&gt;&amp;nbsp;that it has long been hard to find companies that don&#39;t do it (if you haven&#39;t read the book &lt;a href=&quot;https://www.amazon.com/Disrupted-My-Misadventure-Start-Up-Bubble/dp/0316306088&quot;&gt;&quot;Disrupted&quot;&lt;/a&gt; I highly recommend you do it soon). Quite frankly typical conference speakers, self-declared &quot;industry analysts/thought leaders/opinion makers&quot; and a certain class of consultants aren&#39;t any better at any of this either.&lt;br /&gt;&lt;br /&gt;As the Hype-Driven Development writeup author correctly points out, the ultimate safeguard against hype is ethical, responsible, business-value-focused developers that see the wasted effort, inflated costs, ongoing maintenance complexity and outright project failures that constantly chasing hype causes. Open standards, as an insulator between end-users and vendors have an important role to play as well. Indeed the many non-vendor independents in Java EE JSRs that I&#39;ve had the honor to work alongside for years have long guarded carefully against hype. They understand well that guarding against hype and promoting long-term stability/simplicity is one of the most valuable things open standards can uniquely provide by encouraging direct early participation from real end-users as key stakeholders in Java EE expert groups. It is no coincidence that the worst standardization mistakes in Java occurred in the J2EE era when expert groups were almost exclusively vendor dominated. EJB 2 Entity Beans and an overzealous emphasis on EJB remoting/distributed objects were the key HDD ingredients of their day (indeed there are far too many stark parallels between distributed objects and microservices - it&#39;s almost as though our industry is choosing to stubbornly forget the hard-earned lessons of the past :-)).&lt;br /&gt;&lt;br /&gt;Often the only real way of getting things right is taking the lessons of past mistakes to heart. I think for many years now that has been true of Java EE. Most of the key changes in Java EE 5, Java EE 6 and Java EE 7 have been about standardizing ideas that have already been reasonably established. This includes standardizing JPA based on Hibernate, TopLink and JDO, standardizing CDI based on Seam, standardizing Bean Validation based on Hibernate Validator and standardizing JSF features based on RichFaces, PrimeFaces, OmniFaces, Seam Faces and DeltaSpike. The great lesson Rails had to teach Java EE is that it is OK to be a highly opinionated framework that wholeheartedly embraces the integrated platform concept and convention-over-configuration. Java EE 5 took those lessons to heart and frankly the Java EE community still enjoys the real benefits of those changes in a way few other communities do even today (and as many of us understood from the start neither Ruby nor Rails &quot;took over the world&quot; but instead found their own comfortable space for success; many of us in the Java EE community view Node.js in the same light today despite the tiresome hype now).&lt;br /&gt;&lt;br /&gt;There have of course been some well-vetted organic innovations in Java EE as well. Examples include using annotations as metadata in EJB 3, declarative style service endpoints in JAX-WS, JAX-RS and WebSocket, CDI&amp;nbsp;@Observer,&amp;nbsp;@Stereotype, @Decorator and InjectionPoints as well as EJB 3&amp;nbsp;@Asynchronous and @Schedule. Some of us find it more than a bit ironic that many of these changes are actually quietly adopted later by frameworks that position themselves as rivals of Java EE but simultaneously claim a veritable monopoly on innovation in server-side Java...&lt;br /&gt;&lt;br /&gt;By contrast there has been hype that the Java EE expert group has chosen to bypass, I think for the better. SOA is a fairly clear example. Even at the height of SOA hype, Java EE essentially kept SOA specific features at arm&#39;s length, limiting it to the basic ability to publish SOAP endpoints using JAX-WS. Thankfully Java EE never over-reached into the inevitable quagmire of ESBs, enterprise integration frameworks or the WS-* family of specifications. The only small step in this misguided direction ended relatively expeditiously with the pruning of JAXR in Java EE 6.&lt;br /&gt;&lt;br /&gt;I know my saying so will not sit well with some of my fellow Java EE expert group members, but another good example is Java EE largely bypassing OSGi hype. It was obvious from the start that the complexity of the OSGi model/runtimes coupled with the complexity/needlessness of trying to modularize most real world applications was bound for failure in the blue collar enterprise (does anyone still even remember Spring Dynamic Modules or SpringSource dm Server?). Java EE ended up making no changes to try to accommodate feverish OSGi hype of the day. What happened was far more pragmatic. With the notable (and unfortunate) exception of WebLogic, Java EE vendors modularized their runtimes instead - performing a very difficult ground-up rewrite few other non-trivial software projects would have likely survived. I think a particularly brave shining examples of this is WebSphere Liberty. IBM could have just stopped at embracing the Web Profile via WebSphere Classic. Instead they chose to simultaneously embrace the Web Profile, a total rewrite and ground-up modularity via WebSphere Liberty.&lt;br /&gt;&lt;br /&gt;This complex and nuanced context is why some of us raised an eyebrow when we saw some of Oracle&#39;s Java EE 9 ideas. Frankly it is the reason the question on innovation and standardization showed up in the survey at all. Some of the Java EE 9 proposals look more along the lines of the past mistakes made in the name of vendor-driven innovation/time-to-market concerns of the J2EE era than the more measured, community-driven standardization of the Java EE era. Conversely, this is also why most Java EE folks see the critical value in the &lt;a href=&quot;http://microprofile.io/&quot;&gt;MicroProfile&lt;/a&gt; effort and projects like &lt;a href=&quot;http://wildfly-swarm.io/&quot;&gt;WildFly Swarm&lt;/a&gt; that innovate with Java EE and serve as pipelines for standardization of proven concepts.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Java EE as an Enabler of Innovation&lt;/b&gt;&lt;br /&gt;This discussion will not be complete without some understanding of the fact that Java EE does far more than simply passively standardize proven changes. Java EE actually seeks to enable innovation in more fundamental ways than most seem to know or wish to acknowledge.&lt;br /&gt;&lt;br /&gt;There is a curious charge out there that Java EE somehow discourages innovation by insisting that developers only use standard APIs and only the platform. At best this is a grossly outdated idea that persists from the J2EE era fueled by ignorance. At worst it is a bit of deliberately designed anti-competitive propaganda.&lt;br /&gt;&lt;br /&gt;The reality is that Java EE has long done it&#39;s best to promote innovations through plug-ins, extensions and conservative standardization. Every expert group in virtually every Java EE JSR works hard to make sure Java EE APIs have ample extension points that both the community and vendors can use. Some obvious examples include the CDI portable extensions API, CDI interceptors, Servlet filters/listeners, JAX-RS interceptors/filters, JPA unwrap methods, the JSF component model, the WebSocket programmatic API, WebSocket encoders/decoders, Bean Validation custom constraints, JCA connectors and many more. The clearest message of the active encouragement of ecosystem innovation that builds on the platform comes from the very charter of Java EE from years past now:&lt;br /&gt;&lt;br /&gt;&quot;It would not be appropriate for the Java EE platform to grow without bound to include all the interesting and useful technologies desired by web and enterprise application developers. Instead, we believe it is desirable to enable more of these technologies to cleanly layer on or plug in to Java EE application servers. By adding more extensibility points and more service provider interfaces, these other technologies can plug in to platform implementations cleanly and efficiently, and be just as easy to use for developers as the facilities that are built into the platform&quot;.&lt;br /&gt;&lt;br /&gt;These are the capabilities and underlying philosophy that powers projects like Seam, Arquillian, DeltaSpike, PrimeFaces, OmniFaces and so many more. Indeed these capabilities power the very products that aim to position themselves as alternatives to Java EE.&lt;br /&gt;&lt;br /&gt;The Java EE platform goes farther than simply provide extensions. It has long been the case that almost every Java EE API is also available outside the platform in a standalone fashion. This is the case despite the fact that these APIs target Java EE in their JSR charter, closely integrate with other Java EE APIs, coordinate heavily with the Java EE expert group both in terms of schedule as well as content and are often directly funded/staffed by product teams that provide commercial implementations of the Java EE platform rather than an individual API. These standalone parts of Java EE can be used basically in any way anyone can imagine. This takes substantive hard work and real investments that even the most aggressive competitors to Java EE can and do routinely take advantage of. A good friend and fellow Java EE expert group member once asked me &quot;why do we do this to ourselves?&quot;. The answer is that it is the right thing to do in order to promote innovation and extend the value of Java EE to the ecosystem far beyond the boundaries of just those folks that embrace Java EE as a cohesive platform. The hope of course is that some of the resulting innovation would make it&#39;s way back to the platform. There is no other platform, standard or otherwise, that goes to such lengths to empower innovation in a very broad ecosystem. Failing to properly acknowledge these facts does serious disfavors to the very ecosystem that benefits from Java EE.&lt;br /&gt;&lt;br /&gt;I do hope this post serves as food for thought in the complex topic of Java EE, standards and innovation. Please do stay tuned as I further look at a few more similarly fundamental topics in the survey. In addition to my write-up, I would encourage you to look at the survey results yourself and get involved in Java EE. You can certainly do so by becoming a part of the&amp;nbsp;&lt;a href=&quot;https://javaee-guardians.io/&quot;&gt;Java EE Guardians&lt;/a&gt;.</description>
            <link>http://blog.rahmannet.net/2017/03/dzonejava-ee-guardians-survey-results_13.html</link>
            <author>noreply@blogger.com (Reza Rahman)</author>
            <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://3.bp.blogspot.com/-zMLSvzVTeuM/WMWvxyuUxwI/AAAAAAAAFIg/3PVK0Tpz07IhdR8iilKkKov6WqkNuf8ygCLcB/s72-c/innovation.png" height="72" width="72"/>
            <thr:total>0</thr:total>
        </item>
        <item>
            <guid isPermaLink="false">tag:blogger.com,1999:blog-37157465.post-1271453715868889230</guid>
            <pubDate>Fri, 10 Mar 2017 20:03:00 +0000</pubDate>
            <atom:updated>2017-03-10T15:13:23.949-05:00</atom:updated>
            <title>Java EE @ DevNexus 2017</title>
            <description>DevNexus 2017 was held in historic Atlanta on February 22-24. For those of you not familiar with it, DevNexus is the most significant Java centric conference in the South Eastern US and now perhaps even at a national level. It was started by JBoss Java Champion Burr Sutter and organized by the Atlanta JUG (currently lead by Vincent Mayers, Gunnar Hillert, Pratik Patel, et al). I guess at this point I am somewhat of a DevNexus veteran myself. As usual DevNexus attracted a bevy of world class speakers including Ed Burns, David Blevins, Ivar Grimstad, Simon Ritter, Heather VanCura, Stephen Chin, Simon Maple, Geertjan Wielenga, Victor Orozco, Edson Yanaga and&amp;nbsp;Enrique Zamudio. This was another solid year for DevNexus. Java EE had a strong showing at the conference as usual, including my own sessions.&lt;br /&gt;&lt;br /&gt;&lt;center&gt;&lt;img src=&quot;https://blogs.oracle.com/theaquarium/resource/devnexus.png&quot; width=&quot;90%&quot; /&gt;&lt;/center&gt;&lt;br /&gt;I am very proud to say my company CapTech sponsored DevNexus for the very first time. We had a fully manned booth that saw very good traffic and we also sponsored a well attended happy hour.&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://4.bp.blogspot.com/-hHTCmr5yBnA/WMMDERbVRmI/AAAAAAAAFIA/l0B89RB9XT0cngeZmcStM7fjCAH-OJ4KwCLcB/s1600/IMG_2983.JPG&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;300&quot; src=&quot;https://4.bp.blogspot.com/-hHTCmr5yBnA/WMMDERbVRmI/AAAAAAAAFIA/l0B89RB9XT0cngeZmcStM7fjCAH-OJ4KwCLcB/s400/IMG_2983.JPG&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;I started the conference late afternoon on the first day with my talk titled &quot;Java EE 8 and Java EE 9 - What You Need to Know!&quot;. I discuss continued Java EE adoption, the importance of Java EE to the ecosystem, the contents of the upcoming Java EE 8 release as well as the tentative Java EE 9 plans that Oracle shared at JavaOne 2016. I also talk about the key&amp;nbsp;&lt;a href=&quot;http://microprofile.io/&quot;&gt;MicroProfile&lt;/a&gt; initiative that aims to bring a collaborative, fast-paced, vendor-neutral approach to microservices in the Java EE ecosystem. The heart of the talk covers the key features of Java EE 8 such as HTTP/2, a complete security API overhaul, even stronger JSON support, support for HTML 5 Server-Sent Events (SSE), CDI 2, Bean Validation 2 and Java SE 8 alignment. The current slides for the talk are here (click &lt;a href=&quot;http://www.slideshare.net/reza_rahman/javaee8&quot;&gt;here&lt;/a&gt; if you can&#39;t see the embedded slide deck):&lt;br /&gt;&lt;br /&gt;&lt;center&gt;&lt;iframe allowfullscreen=&quot;&quot; frameborder=&quot;0&quot; height=&quot;485&quot; marginheight=&quot;0&quot; marginwidth=&quot;0&quot; scrolling=&quot;no&quot; src=&quot;https://www.slideshare.net/slideshow/embed_code/key/573r9DlXi74BSl&quot; style=&quot;border-width: 1px; border: 1px solid #ccc; margin-bottom: 5px; max-width: 100%;&quot; width=&quot;595&quot;&gt; &lt;/iframe&gt; &lt;div style=&quot;margin-bottom: 5px;&quot;&gt;&lt;strong&gt; &lt;a href=&quot;https://www.slideshare.net/reza_rahman/javaee8&quot; target=&quot;_blank&quot; title=&quot;Java EE 8 and Java EE 9 - What You Need to Know&quot;&gt;Java EE 8 and Java EE 9 - What You Need to Know!&lt;/a&gt;&amp;nbsp;&lt;/strong&gt;from &lt;strong&gt;&lt;a href=&quot;https://www.slideshare.net/reza_rahman&quot; target=&quot;_blank&quot;&gt;Reza Rahman&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;/center&gt;Later in the afternoon my former colleague Ed Burns did a deeper dive on three specific Java EE 8 APIs - Servlet 4, JAX-RS 2.1 and JSF 2.3. For those unaware, Ed is the specification lead for both Servlet 4 and JSF 2.3.&lt;br /&gt;&lt;br /&gt;Early in the evening I delivered my talk on Cargo Tracker/Java EE + DDD titled &quot;Applied Domain-Driven Design Blue Prints for Java EE&quot;. This talk overviews DDD and describes how DDD maps elegantly to Java EE using code examples/demos from the &lt;a href=&quot;http://cargotracker.java.net/&quot;&gt;Cargo Tracker Java EE Blue Prints project&lt;/a&gt;. Below is the slide deck for the talk (click &lt;a href=&quot;http://www.slideshare.net/reza_rahman/domain-driven-design-with-java-ee-6&quot;&gt;here&lt;/a&gt; if you can&#39;t see the embedded slides):&lt;br /&gt;&lt;br /&gt;&lt;center&gt;&lt;iframe allowfullscreen=&quot;&quot; frameborder=&quot;0&quot; height=&quot;485&quot; marginheight=&quot;0&quot; marginwidth=&quot;0&quot; scrolling=&quot;no&quot; src=&quot;https://www.slideshare.net/slideshow/embed_code/key/rfKvFm7fLHuBRi&quot; style=&quot;border-width: 1px; border: 1px solid #ccc; margin-bottom: 5px; max-width: 100%;&quot; width=&quot;595&quot;&gt; &lt;/iframe&gt; &lt;div style=&quot;margin-bottom: 5px;&quot;&gt;&lt;strong&gt; &lt;a href=&quot;https://www.slideshare.net/reza_rahman/domain-driven-design-with-java-ee-6&quot; target=&quot;_blank&quot; title=&quot;Applied Domain-Driven Design Blue Prints for Java EE&quot;&gt;Applied Domain-Driven Design Blue Prints for Java EE&lt;/a&gt; &lt;/strong&gt; von &lt;strong&gt;&lt;a href=&quot;https://www.slideshare.net/reza_rahman&quot; target=&quot;_blank&quot;&gt;Reza Rahman&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;/center&gt;A screencast of my talk can be found &lt;a href=&quot;http://www.captechconsulting.com/videos/applied-domain-driven-design-blue-prints-for-java-ee&quot;&gt;here&lt;/a&gt;. Concurrent to my talk, my friend Kito Mann delivered his very cool talk on&amp;nbsp;JSF and HTML 5 Web Components.&lt;br /&gt;&lt;br /&gt;The second day of the conference in the late afternoon Ivar delivered a deep dive into the MicroProfile initiative. Concurrent to his talk Heather delivered a talk on JCP and Adopt-a-JSR. Later in the afternoon Ivar delivered a talk on the upcoming MVC specification. For those unaware, MVC was originally slated for Java EE 8 and is now a separate, community led JSR.&lt;br /&gt;&lt;br /&gt;Overall this was another great year at DevNexus and I hope to be part of the conference next year.</description>
            <link>http://blog.rahmannet.net/2017/03/java-ee-devnexus-2017.html</link>
            <author>noreply@blogger.com (Reza Rahman)</author>
            <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://4.bp.blogspot.com/-hHTCmr5yBnA/WMMDERbVRmI/AAAAAAAAFIA/l0B89RB9XT0cngeZmcStM7fjCAH-OJ4KwCLcB/s72-c/IMG_2983.JPG" height="72" width="72"/>
            <thr:total>0</thr:total>
        </item>
        <item>
            <guid isPermaLink="false">tag:blogger.com,1999:blog-37157465.post-3692455579573128720</guid>
            <pubDate>Wed, 08 Mar 2017 18:21:00 +0000</pubDate>
            <atom:updated>2017-04-10T22:21:47.040-04:00</atom:updated>
            <title>DZone/Java EE Guardians Survey Results: Security</title>
            <description>As some of you are aware, the &lt;a href=&quot;https://javaee-guardians.io/&quot;&gt;Java EE Guardians&lt;/a&gt; and DZone jointly conducted a community survey to help determine Java EE 8 features prior to JavaOne 2016. You may also be aware that &lt;a href=&quot;https://java.net/projects/javaee-spec/lists/users/archive/2016-09/message/0&quot;&gt;we shared the results of that survey with Oracle&lt;/a&gt; before the details of the renewed Java EE 8 scope was announced. Now is a great time to start analyzing those results a bit more. I&#39;ve already done a &lt;a href=&quot;http://blog.rahmannet.net/2017/01/dzonejava-ee-guardian-survey-results.html&quot;&gt;high level summary of the results&lt;/a&gt;. I&#39;ve also done a deeper dive into the responses for &lt;a href=&quot;http://blog.rahmannet.net/2017/01/dzonejava-ee-guardians-survey-results.html&quot;&gt;HTTP/2 and Servlet 4&lt;/a&gt;&amp;nbsp;as well as &lt;a href=&quot;http://blog.rahmannet.net/2017/02/dzonejava-ee-guardians-survey-results.html&quot;&gt;Java SE 8 alignment&lt;/a&gt;.&amp;nbsp;In this entry I&#39;ll take a look at the responses for revamping Java EE security.&lt;br /&gt;&lt;br /&gt;Here is how the survey phrased the question:&lt;br /&gt;&lt;br /&gt;&quot;Java EE security is one of the last areas left to be revamped in the way most other APIs such as EJB 3 have been changed radically. As a result Java EE security is very highly dependent on things like vendor-specific GUI console wizards, vendor-specific configuration or command-line administrative tools. Pluggability, extensibility and customization is also currently challenging when the security features that already come with the application server are not sufficient.&lt;br /&gt;&lt;br /&gt;This situation is the primary driver for the proliferation of third-party security frameworks in server-side Java such as Shiro and Keycloak. The Java EE Security API has been slated to solve these issues in Java EE 8. As an example securing a Java EE application could be as simple as writing the following annotation:&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;&quot;&gt;@DataBaseIdentityStore(&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;&quot;&gt;&amp;nbsp; &amp;nbsp; lookup=&quot;java:app/MyDB&quot;,&amp;nbsp;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;&quot;&gt;&amp;nbsp; &amp;nbsp; userQuery=&quot;SELECT password FROM principals WHERE username=?&quot;,&amp;nbsp;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;&quot;&gt;&amp;nbsp; &amp;nbsp; rolesQuery=&quot;SELECT role FROM roles where username=?&quot;, ...)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;How important is it to revamp the Java EE security API?&quot;.&lt;br /&gt;&lt;br /&gt;The following graphic shows how the community responded. Support for revamping Java EE security is clearly fairly strong. 47% said it is very important while another 30% said it is important. Only about 5% said it is not important. It is the case though that support is not as strong as it is for example for Servlet 4 and Java SE 8 alignment. I think this generally makes sense. While there are decent options for Java EE security, HTTP/2 support and being able to effectively use Java SE 8 is far more foundational. If you are interested to learn a bit more about the Java EE Security API, a great place to start is the &lt;a href=&quot;https://drive.google.com/file/d/0B4QN2eZt4p5dVlNYaDZiYU5FUmc/view&quot;&gt;actual working specification draft&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://2.bp.blogspot.com/-AG1kmeD-Ge0/WMA4uHi7xLI/AAAAAAAAFHo/n_jhNF9rS_wZkgnith2_6X1l9w2fpyuFwCLcB/s1600/javaee_security.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;222&quot; src=&quot;https://2.bp.blogspot.com/-AG1kmeD-Ge0/WMA4uHi7xLI/AAAAAAAAFHo/n_jhNF9rS_wZkgnith2_6X1l9w2fpyuFwCLcB/s400/javaee_security.png&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;Here are some representative comments from participants in the order that people filled in the survey: &quot;One of the areas where no real standardization is done yet because you always need to have application server specific configuration&quot;, &quot;The currently available security features in Java EE don&#39;t comprise a full end-to-end solution, to really secure an application one has to rely on vendor specific features&quot;, &quot;I always found it quite challenging to work with JAAS and the vendor specific configuration required to get it to work in different containers. I am really looking forward to simpler and better integrated solutions&quot;, &quot;Would be nice to get this into the app and out of the app&#39;s XXXX.xml and container configuration. It would seem to be a step in the right direction to making apps more fully portable&quot;.&lt;br /&gt;&lt;br /&gt;It is important to note that in the&amp;nbsp;&lt;a href=&quot;https://blogs.oracle.com/ldemichiel/entry/results_from_the_java_ee&quot;&gt;original survey that helped launch Java EE 8&lt;/a&gt;, security related questions rank extremely high. Somewhat surprisingly&amp;nbsp;&lt;a href=&quot;https://blogs.oracle.com/theaquarium/entry/java_ee_8_community_survey2&quot;&gt;Oracle&#39;s own Java EE 8/9 survey&lt;/a&gt;&amp;nbsp;did not directly include any questions on Java EE security. It did pose questions on OAuth/OpenID support which ranked extremely high. Judging by Oracle&#39;s actions taken to move Java EE 8 forward, it seems they basically took for granted that Java EE security was important and the OAuth/OpenID question may have been more geared towards Java EE 9 (there are many such questions on the Oracle survey). The Java EE Security API is now moving ahead strongly to a completion date of around summer. It is sticking largely to the original scope defined for Java EE 8 while deferring OAuth/OpenID support to maintain delivery schedule (Oracle did in fact consider pulling in OAuth/OpenID support based on survey feedback).&lt;br /&gt;&lt;br /&gt;Please do stay tuned as I further analyze specific topics in the survey. In addition to my write-up, I would encourage you to look at these survey results yourself and get involved in Java EE 8. You can certainly do so by becoming a part of the&amp;nbsp;&lt;a href=&quot;https://javaee-guardians.io/&quot;&gt;Java EE Guardians&lt;/a&gt;. </description>
            <link>http://blog.rahmannet.net/2017/03/dzonejava-ee-guardians-survey-results.html</link>
            <author>noreply@blogger.com (Reza Rahman)</author>
            <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://2.bp.blogspot.com/-AG1kmeD-Ge0/WMA4uHi7xLI/AAAAAAAAFHo/n_jhNF9rS_wZkgnith2_6X1l9w2fpyuFwCLcB/s72-c/javaee_security.png" height="72" width="72"/>
            <thr:total>0</thr:total>
        </item>
        <item>
            <guid isPermaLink="false">tag:blogger.com,1999:blog-37157465.post-8370354352507472970</guid>
            <pubDate>Mon, 06 Mar 2017 04:57:00 +0000</pubDate>
            <atom:updated>2017-03-06T00:04:02.961-05:00</atom:updated>
            <title>Java EE Adoption Story from Armen Arzumanyan</title>
            <description>One of the most important things to do at this stage of the life-cycle of Java EE is highlight successful adoption stories at a regular cadence. The community has been doing just that for a long time including at JavaOne. A number of these stories are curated &lt;a href=&quot;https://javaee-guardians.io/java-ee-adoption-stories/&quot;&gt;here&lt;/a&gt;. Armen Arzumanyan&amp;nbsp;recently agreed to share his Java EE adoption story. He has developed a number of mission critical Java EE applications in his native Armenia and beyond. One of his applications - Taxpayer3 - was so impactful that it won an international award. Armen had a number of insightful things to say about Java EE worth paying attention to. I have highlighted specific passages that really stand out.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Can you kindly introduce yourself?&lt;/b&gt;&lt;br /&gt;My name is Armen, I am a Java developer and architect. I have about ten years of experience in Java development. I was introduced to Java while working at Lycos Europe. At Lycos we used J2EE on JBoss to develop applications in the early days of Java.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Can you describe the applications that use Java EE?&lt;/b&gt;&lt;br /&gt;The very first application I developed from scratch in Java EE was actually a social network! I was tasked with researching the technologies to implement the front-end as well as the back-end.&lt;br /&gt;&lt;br /&gt;The requirements dictated that the front-end and back-end should run on different servers as well as provide a rich front-end.&lt;br /&gt;&lt;br /&gt;I tried as much as possible to utilize Java web technologies.&lt;br /&gt;&lt;br /&gt;Back in 2008, I was pleasantly surprised with JBoss 4.2.2 - it was possible to develop a @Stateless EJB 3 based back-end without any configuration! Meanwhile, for the front-end I chose JSF 1.2. JSF allowed directly connecting web form components from a web page to Java Beans. JSF is also based on component controls which saves development time. The important part of the page layout is covered well by Facelets.&lt;br /&gt;&lt;br /&gt;Back then, EJB 3 POJO remote interfaces made me very happy. I was able to send/receive DTOs completely transparently (no JSON, no XML).&lt;br /&gt;&lt;br /&gt;I prepared a short demonstration to my team with the front-end running on JSF/Tomcat and back-end running on EJB 3/JBoss 4.2.2. The demo was a success and was approved.&lt;br /&gt;&lt;br /&gt;The second significant Java EE project I helped develop from scratch was Taxpayer3. Taxpayer3 was one of the biggest Java EE applications ever developed in the former USSR. In fact the project won &lt;a href=&quot;http://www.taxservice.am/MD_News.aspx?nid=214&quot;&gt;a top international award&lt;/a&gt;&amp;nbsp;due to it&#39;s innovation and impact.&amp;nbsp;&lt;i&gt;&lt;b&gt;Java EE covered all of our architectural requirements well - stable, stateless, productive and easy to upgrade.&lt;/b&gt;&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;Last but certainly not least two interesting Java EE projects I develop and support are an e-procurement system and ID-card printing system. In addition I support a very popular PKI Certificate Authority software used in lots of countries. The software is available at&amp;nbsp;&lt;a href=&quot;https://www.ejbca.org/&quot;&gt;https://www.ejbca.org&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Why did you choose Java EE?&lt;/b&gt;&lt;br /&gt;As a Java developer my introduction to enterprise Java started with the official Java EE tutorial. I think all Java developers should learn Java EE. Java EE gives you the fundamental skills for developing business-oriented applications. &lt;br /&gt;&lt;br /&gt;Using Java EE and using application servers allow you to grow from a developer to an architect. &lt;br /&gt;&lt;br /&gt;When people ask me “How did you become a senior Java developer?”, my answer is very short: &lt;br /&gt;&lt;br /&gt;&quot;I know Java EE&quot; &lt;br /&gt;&lt;br /&gt;It puzzles me that in some companies Java developers don&#39;t know Java EE and create applications using just Tomcat that are very similar to what you can do easily with what Java EE already offers out of the box. People create a lot of service layers in their applications and every component can be injected into another, no matter where is it located. But with EJB 3 you get a lot of additional power because you can make fully interchangeable local and remote interfaces which speaks to the ability to really hide your implementation behind a façade. &lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;i&gt;For me Java EE applications have always been a success: you have real statelessness, you have components, you have REST, you have remote calls, you can easily upgrade from version to version, you never need much configuration, you are focused only on development and on business logic.&lt;/i&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;Another powerful capability is Message Driven Beans which allow you to easily enable asynchronous messaging. &lt;br /&gt;&lt;br /&gt;One interesting fact I am finding out is that I have never really developed monolithic applications! In the least my back-end has always been isolated and interacts with the front-end via DTOs. With Java EE you are not limited to just REST and JSON, which some enterprises still don&#39;t accept as a format. For example you could easily use SOAP or EJB remoting instead! &lt;br /&gt;&lt;br /&gt;Once in an interview I got asked “Which version of JBoss have you used?”. I answered “JBoss 4.2.2, 4.2.3, 5.1 and 7.1&quot;. The interviewer replied “You are hired&quot;. &lt;br /&gt;&lt;br /&gt;Nowadays with the microservices trend, WildFly Swarm looks very interesting. The framework enables you to develop microservices with JSF/PrimeFaces/Java EE. &lt;br /&gt;&lt;br /&gt;&lt;b&gt;How do the applications use Java EE?&lt;/b&gt;&lt;br /&gt;In production I use a JBoss/EJB 3/JMS + MySQL-PostgreSQL-Oracle DB combination. Pure front-end parts with JSF run under Tomcat or JBoss. &lt;br /&gt;&lt;br /&gt;&lt;b&gt;How was your general experience with Java EE? Would you use it again?&lt;/b&gt;&lt;br /&gt;I am using different technologies in different projects. Java developers should always explore a wide variety of solutions. But not understanding Java EE is like losing half of Java for no good reason. &lt;br /&gt;&lt;br /&gt;Trying to compare technologies with each other is unwise. Instead we should compare technologies with project requirements, but you won&#39;t find a future that doesn&#39;t include the Java EE technology stack. &lt;br /&gt;&lt;br /&gt;&lt;b&gt;How can people contact you if they have questions?&lt;/b&gt;&lt;br /&gt;My email is armen dot arzumanyan at gmail dot com and you can follow me on GitHub at &lt;a href=&quot;https://github.com/armdev&quot;&gt;https://github.com/armdev&lt;/a&gt;.</description>
            <link>http://blog.rahmannet.net/2017/03/java-ee-adoption-story-from-armen.html</link>
            <author>noreply@blogger.com (Reza Rahman)</author>
            <thr:total>2</thr:total>
        </item>
        <item>
            <guid isPermaLink="false">tag:blogger.com,1999:blog-37157465.post-1927356922957004544</guid>
            <pubDate>Thu, 02 Mar 2017 20:28:00 +0000</pubDate>
            <atom:updated>2017-03-02T15:54:59.358-05:00</atom:updated>
            <title>New Java Community Process (JCP) Membership Types and What They Mean</title>
            <description>Last year the Java Community Process (JCP) introduced a couple of pretty important new membership types. Ever since Java EE 5 the community has played a larger and larger role certainly in shaping Java EE standards and these new membership types are important enablers in the same direction. In this post I&#39;ll explain the new membership types and what they actually mean. I&#39;ll also explain how I and the Philly JUG have used these new membership types.&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://2.bp.blogspot.com/-UUwtsvcBFCs/WLiAZzIIY7I/AAAAAAAAFFE/-knKFnaVlp8CSHTIXymNosVuRPNOKrUKwCLcB/s1600/Java%2BCommunity.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;113&quot; src=&quot;https://2.bp.blogspot.com/-UUwtsvcBFCs/WLiAZzIIY7I/AAAAAAAAFFE/-knKFnaVlp8CSHTIXymNosVuRPNOKrUKwCLcB/s400/Java%2BCommunity.png&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;b&gt;The Existing Membership Types&lt;/b&gt;&lt;br /&gt;Before getting into the new membership types I think it helps to explain what the existing membership types were. Before last year there was really two ways of joining the JCP - either as a company or as an individual. Company membership types are the original kind of JCP membership type. As scary as it is, this is basically the most common membership type for most standards bodies out there (yikes). Thankfully this has been the least common type of JCP membership for a long time.&lt;br /&gt;&lt;br /&gt;However, even if you did want to join the JCP as an individual, you needed official permission from your company. This is a real hurdle for many people and I personally know of cases where people could not join the JCP exactly for this reason. As a long-time self-employed independent consultant this was a non-issue for me (I simply had to give myself permission to join :-)). This is how I served as an expert on the EJB 3.1, Java EE 6, JMS 2, Java EE 7 and EJB 3.2 expert groups. I believe I have been one of the most active members of those expert groups.&lt;br /&gt;&lt;br /&gt;Either as an individual or a company, you are basically considered a &quot;full member&quot;. That means you can do pretty much anything in the JCP - including submitting your own JSR, becoming a specification lead, becoming an expert or running for a spot on the executive committee. In case you are wondering this also includes legally recognized non-profits like Apache.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Associate Member&lt;/b&gt;&lt;br /&gt;The new Associate membership type is basically the same as the individual membership I&#39;ve used for such a long time with one big exception. In order to join as an Associate member, you don&#39;t actually need permission from your company. This does come with some limitations that I don&#39;t think matter that much. You can&#39;t become a specification lead. You can&#39;t run for the JCP executive committee. Indeed you don&#39;t get to be an &quot;expert&quot; on a JSR either. You can however become a &quot;contributor&quot; to a JSR.&lt;br /&gt;&lt;br /&gt;In practice the difference between a &quot;contributor&quot; and an &quot;expert&quot; on a JSR is pretty meaningless for most people. As a mere &quot;contributor&quot; you basically can&#39;t write specification text or contribute code to the compatibility tests (TCK) or the reference implementation (RI). You can do everything else like review specification work and participate in discussions. The truth of the matter is that I am one of the most active contributors in most of the Java EE JSRs I have been on and this is basically all I did anyway. As a result, I&#39;ve actually chosen to join the JCP as an Associate member instead of &amp;nbsp;a full member for this reason. I am now a &quot;contributor&quot; to Servlet 4, Java EE 8 and Java EE Security. I still get to do exactly what I&#39;ve done for years and get credit for it in the specification document.&lt;br /&gt;&lt;br /&gt;To be honest, it would have been easy enough for me to get permission from my company to join as a full member. The reason I chose not to do that is because there wasn&#39;t a need and I also wanted to encourage others to do exactly what I did. This is particularly important for JUGs and Adopt-a-JSR. I&#39;ll explain more in the next few sections why this is.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Partner Member&lt;/b&gt;&lt;br /&gt;Besides joining as a fully legally recognized entity, non-profits can now also join as Partner members. Very simply put, this is basically intended for Java user groups. Many of the larger Java user groups are actually legally recognized non-profits. For these JUGs, joining as full members is perfectly fine. Most JUGs in the world are not legally recognized entities. These JUGs can now join the JCP as Partner members. Partner members do have limitations. They can&#39;t become specification leads. They can&#39;t even join a JSR as an expert or a contributor. They can however do one very important thing - run for a seat in the JCP executive committee.&lt;br /&gt;&lt;br /&gt;At the Philly JUG, we did not opt to become a legal entity yet. It&#39;s just too much hassle with not enough of a benefit for us. As a result, the Philly JUG has joined the JCP as a Partner member. We are not running for the JCP executive committee yet, but we might.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Adopt-a-JSR&lt;/b&gt;&lt;br /&gt;It&#39;s important to understand how all of this relates to &lt;a href=&quot;https://community.oracle.com/community/java/jcp/adopt-a-jsr&quot;&gt;Adopt-a-JSR&lt;/a&gt;. The first thing to understand is that you can participate in Adopt-a-JSR without even being a member of the JCP. The issue is that you really don&#39;t get recognized in the specification itself as either a contributor or an expert (but the lead still can make a special mention if they want). Your JUG does get listed on the &lt;a href=&quot;https://community.oracle.com/docs/DOC-922461&quot;&gt;Adopt-a-JSR JUGs&lt;/a&gt; page.&lt;br /&gt;&lt;br /&gt;A much better way to go is to adopt a JSR, get your JUG registered as a JCP Partner member and get JUG members to become official contributors to the JSRs you are adopting as JCP Associates. This can all be done without any company being involved. This is exactly what the Philly JUG has done. The Philly JUG is now an adopter of Java SE 9, Servlet 4, Java EE 8 as well as Java EE Security.&lt;br /&gt;&lt;br /&gt;I hope this writeup inspires you to join the JCP using the new membership types. In the many years that I&#39;ve worked in the JCP, the oddest part has been the tiny number of exceptional people that actually participate actively. This really needs to change if Java is to remain successful. You need to be a part of that change.&lt;br /&gt;&lt;br /&gt;If you have any questions on any of this, don&#39;t hesitate to reach out. I&#39;ll try to help as much as I can. One resource that might help is the &lt;a href=&quot;https://jcp.org/en/participation/overview&quot;&gt;JCP page on membership types&lt;/a&gt;.</description>
            <link>http://blog.rahmannet.net/2017/03/new-java-community-process-jcp.html</link>
            <author>noreply@blogger.com (Reza Rahman)</author>
            <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://2.bp.blogspot.com/-UUwtsvcBFCs/WLiAZzIIY7I/AAAAAAAAFFE/-knKFnaVlp8CSHTIXymNosVuRPNOKrUKwCLcB/s72-c/Java%2BCommunity.png" height="72" width="72"/>
            <thr:total>0</thr:total>
        </item>
        <item>
            <guid isPermaLink="false">tag:blogger.com,1999:blog-37157465.post-1386262044381264285</guid>
            <pubDate>Mon, 13 Feb 2017 21:45:00 +0000</pubDate>
            <atom:updated>2017-02-13T16:45:35.046-05:00</atom:updated>
            <title>DZone/Java EE Guardians Survey Results: Java SE 8 Alignment</title>
            <description>As some of you are aware, the &lt;a href=&quot;https://javaee-guardians.io/&quot;&gt;Java EE Guardians&lt;/a&gt; and DZone jointly conducted a community survey to help determine Java EE 8 features prior to JavaOne 2016. You may also be aware that &lt;a href=&quot;https://java.net/projects/javaee-spec/lists/users/archive/2016-09/message/0&quot;&gt;we shared the results of that survey with Oracle&lt;/a&gt; before the details of the renewed Java EE 8 scope was announced. Now is a great time to start analyzing those results a bit more. I&#39;ve already done a &lt;a href=&quot;http://blog.rahmannet.net/2017/01/dzonejava-ee-guardian-survey-results.html&quot;&gt;high level summary of the results&lt;/a&gt;. I&#39;ve also done a deeper dive into the responses for &lt;a href=&quot;http://blog.rahmannet.net/2017/01/dzonejava-ee-guardians-survey-results.html&quot;&gt;HTTP/2 and Servlet 4 support in Java EE 8&lt;/a&gt;. In this entry I&#39;ll take a look at the responses for Java SE 8 alignment in Java EE 8.&lt;br /&gt;&lt;br /&gt;Here is how the survey phrased the question:&lt;br /&gt;&lt;br /&gt;&quot;Java SE 8 brings a bounty of improvements - lambda expressions, the new date/time API, completable futures, streams and the fork/join common pool. Many of these features can be used with Java EE 7, but there remains many important missing pieces.&lt;br /&gt;&lt;br /&gt;In particular Java EE APIs like JPA, JMS, JSF and JAX-RS need to be adapted to make full use of repeatable annotations, the date/time API and completable futures. In addition the fork/join common pool and streams currently cannot be safely used in Java EE environments.&lt;br /&gt;&lt;br /&gt;How important is it to fully align Java EE with Java SE 8?&quot;.&lt;br /&gt;&lt;br /&gt;The following graphic shows how the community responded. Clearly developers think aligning Java EE 8 with Java SE 8 is extremely important. 66% said it is very important while 25% said it is very important. A mere 2% said it is not important. If you want to learn a bit more about Java SE 8 and Java EE, please do feel free to check out my &lt;a href=&quot;http://www.slideshare.net/reza_rahman/java-se-8-for-java-ee-developers-63759751&quot;&gt;slide deck&lt;/a&gt; on the topic. The deck is focused on how Java SE 8 can already be utilized in Java EE but also highlights clear gaps that can only be addressed through changes in Java EE 8.&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://3.bp.blogspot.com/-ncbtrO-OBYc/WKH4GZEq_hI/AAAAAAAAFA4/KF975Ce4B_ATNuCdRt6S_SICDkc69xjsACLcB/s1600/java8.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;253&quot; src=&quot;https://3.bp.blogspot.com/-ncbtrO-OBYc/WKH4GZEq_hI/AAAAAAAAFA4/KF975Ce4B_ATNuCdRt6S_SICDkc69xjsACLcB/s400/java8.png&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;The fact that developers feel so strongly about Java SE 8 is no surprise at all. Every reliable survey shows strong support for Java SE 8, including DZone&#39;s. The most recent RebelLabs survey shows 62% adoption for Java SE 8 - far stronger and faster than any other recent prior version of Java.&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://3.bp.blogspot.com/-v3S9NtpgYV4/WKIBqS5ghfI/AAAAAAAAFBI/C5FoSaigPpAdE9WGp0yu-OS2pUmS6N4NwCLcB/s1600/java-version.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;400&quot; src=&quot;https://3.bp.blogspot.com/-v3S9NtpgYV4/WKIBqS5ghfI/AAAAAAAAFBI/C5FoSaigPpAdE9WGp0yu-OS2pUmS6N4NwCLcB/s400/java-version.png&quot; width=&quot;373&quot; /&gt;&lt;/a&gt;&lt;/div&gt;Here are some representative comments from participants in the order that people filled in the survey: &quot;Java SE 8 APIs are great&quot;, &quot;I&#39;ve always believed that keeping EE on track with the corresponding SE release should be a very important element of every version&quot;, &quot;The changes in SE 8 are a huge improvement for the language. EE 8 users should also benefit from these improvements&quot;, &quot;EE should always be aligned with SE&quot;, &quot;Java SE 8 brought the next level of language features to Java and everyone must take advantage of it&quot;, &quot;This is the most important thing EE 8 needs to do.&quot;. &lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;https://www.jcp.org/en/jsr/detail?id=366&quot;&gt;The initial Java EE 8 charter&lt;/a&gt;&amp;nbsp;clearly mentions Java SE 8 alignment as a major theme. Historically Java EE has always played a key part in bringing Java SE features into the enterprise. A particularly salient example was groundbreaking annotations support in Java EE 5 and EJB 3/JPA. Java EE 5 was the very first mainstream technology to clearly demonstrate how annotations can be used highly effectively as framework meta-data.&lt;br /&gt;&lt;br /&gt;Somewhat surprisingly&amp;nbsp;&lt;a href=&quot;https://blogs.oracle.com/theaquarium/entry/java_ee_8_community_survey2&quot;&gt;Oracle&#39;s own Java EE 8/9 survey&lt;/a&gt;&amp;nbsp;did not directly include any questions on Java SE 8 alignment and they have not specifically addressed the issue either. In practice at least some of the most obvious Java SE 8 alignment work seems to be moving forward for Java EE platform level common annotations, CDI, Bean Validation, JPA, JAX-RS and JSF. I have already asked for &lt;a href=&quot;https://java.net/projects/javaee-spec/lists/users/archive/2016-12/message/7&quot;&gt;a more coordinated plan&lt;/a&gt; and will follow-up soon. If this is an important issue for you, please chime into the &lt;a href=&quot;https://java.net/projects/javaee-spec/lists/users/archive/2016-12/message/7&quot;&gt;linked thread&lt;/a&gt; - it&#39;s very easy to do.&lt;br /&gt;&lt;br /&gt;Please do stay tuned as I further analyze specific topics in the survey. In addition to my analysis, I would encourage you to look at these survey results yourself and get involved in Java EE 8. You can certainly do so by becoming a part of the&amp;nbsp;&lt;a href=&quot;https://javaee-guardians.io/&quot;&gt;Java EE Guardians&lt;/a&gt;. </description>
            <link>http://blog.rahmannet.net/2017/02/dzonejava-ee-guardians-survey-results.html</link>
            <author>noreply@blogger.com (Reza Rahman)</author>
            <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://3.bp.blogspot.com/-ncbtrO-OBYc/WKH4GZEq_hI/AAAAAAAAFA4/KF975Ce4B_ATNuCdRt6S_SICDkc69xjsACLcB/s72-c/java8.png" height="72" width="72"/>
            <thr:total>0</thr:total>
        </item>
        <item>
            <guid isPermaLink="false">tag:blogger.com,1999:blog-37157465.post-4707502071543343558</guid>
            <pubDate>Tue, 07 Feb 2017 00:30:00 +0000</pubDate>
            <atom:updated>2017-02-06T19:54:03.605-05:00</atom:updated>
            <title>Morocco&#39;s First Open Source ERP Uses Java EE 7!</title>
            <description>One of the most important things to do at this stage of the life-cycle of Java EE is highlight successful adoption stories at a regular cadence. The community has been doing just that for a long time including at JavaOne. A number of these stories are curated at &lt;a href=&quot;https://real-world-java-ee.zeef.com/arjan.tijms&quot;&gt;Zeef&lt;/a&gt;&amp;nbsp;(Zeef is also written with Java EE). Mohammed Bounaga recently agreed to share a very cool such adoption story on deftERP&amp;nbsp;- Morocco&#39;s first open source ERP. Mohammed had a number of insightful things to say about Java EE worth paying attention to. I have highlighted specific passages that really stand out.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Can you kindly introduce yourself?&lt;/b&gt;&lt;br /&gt;I&#39;m Mohammed Bounaga and I&#39;m from Ifrane, Morocco. I&#39;m a software engineer and I have been working with Java EE for 3 years. I&#39;m the creator and project lead of &lt;a href=&quot;https://github.com/deftERP/deftERP&quot;&gt;deftERP&lt;/a&gt;. This project is now powered by xHub, a Moroccan startup that supports and believes in open source projects, founded by Badr El Houari - Devoxx Morocco chair, Morocco JUG lead and Java Champion. We are now a small team of talented developers who are working in collaboration with the Java EE community to boost the development of this project and empower the open source ecosystem in Morocco and Africa.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Can you describe the product&amp;nbsp;that uses Java EE?&lt;/b&gt;&lt;br /&gt;After graduating from university, I decided to work full time at home on an interesting and challenging project while sharpening my software development skills. At that time, I had different project ideas including desktop and mobile applications; yet my final choice was to develop an ERP web application since I believe that enterprise applications require complex business processes and they are open for innovation and creativity and this is exactly what I was looking for. The first version of this product was a result of 18 months of hard work with ups and downs that required patience and self-motivation. DeftERP is an open source and smart ERP built with full Java EE 7 (JPA 2.1, EJB 3.2, JSF 2.2, CDI, Beans Validation, JAX-RS, JSON-P, WebSocket...). The product is currently dedicated to small businesses to help them embrace and take advantage of technology to automate their daily working process, reducing working time and energy, having a smart dashboard and some predictions to help them anticipate the future while of course increasing profit. The product currently includes 4 modules: &amp;nbsp;sales, purchases, inventory, and accounting and it&#39;s cloud ready!&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://2.bp.blogspot.com/-rQRSlv4hk2I/WJkVJh5YINI/AAAAAAAAE-k/9EZU6WybKrEUHGuqslL_U1a67qTupMslwCLcB/s1600/deftERP.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;295&quot; src=&quot;https://2.bp.blogspot.com/-rQRSlv4hk2I/WJkVJh5YINI/AAAAAAAAE-k/9EZU6WybKrEUHGuqslL_U1a67qTupMslwCLcB/s400/deftERP.png&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;b&gt;Why did you choose Java EE?&lt;/b&gt;&lt;br /&gt;I had fallen in love with Java during my university years and it has always been my first choice, which is the case with deftERP. The only issue I had when I decided to start this project was which Java web framework to adopt. I spent a couple of weeks doing some research reading blog reviews from the Java community comparing different Java web frameworks including JSF, Spring MVC, and Struts. &lt;b&gt;&lt;i&gt;I was really impressed by the idea behind component based frameworks and how JSF is appropriate for rapid development while still giving you flexibility and room for creativity.&lt;/i&gt;&lt;/b&gt; &lt;i&gt;&lt;b&gt;What is also awesome about JSF is the availability of third party libraries such as PrimeFaces and OmniFaces that empowers developers with a great set of UI components that every application needs, and finally let&#39;s not forget the fact that Java EE is not heavy anymore!&lt;/b&gt;&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;How does the product use Java EE?&lt;/b&gt;&lt;br /&gt;The product is developed with Java EE 7. We are using JSF for the web layer with PrimeFaces as a components library. EJB for the business layer. JPA with the EclipseLink implementation for the persistence layer, WebSocket for real time notification, CDI is of course the glue that binds our application layers together with dependency injection, and we are using BeanValidation to validate our entities against predefined or custom rules (we have built a metadata programming model).&lt;br /&gt;&lt;ul&gt;&lt;/ul&gt;&lt;b&gt;How was your general experience with Java EE? Would you use it again?&lt;/b&gt;&lt;br /&gt;Of course yes, we were happy to know about the plans to move forward Java EE 8 during last JavaOne. We are even planning after releasing the new version to see how we can help in the Adopt-A-JSR program under the umbrella of Morocco JUG. We are also keeping an eye open on the MicroProfile initiative since we are looking forward to revamp and optimize the architecture of deftERP for a microservices architecture. At this stage we aim to include the voice of our community!&lt;br /&gt;&lt;br /&gt;&lt;b&gt;How can people contact you if they have questions?&lt;/b&gt;&lt;br /&gt;Questions and contributions are always welcome!&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Email: medbounaga AT gmail DOT com&lt;/li&gt;&lt;li&gt;Github repository: &lt;a href=&quot;https://github.com/deftERP/deftERP&quot;&gt;https://github.com/deftERP/deftERP&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Facebook group: &lt;a href=&quot;https://www.facebook.com/groups/1545570112415771&quot;&gt;https://www.facebook.com/groups/1545570112415771&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;If you have a similarly great Java EE adoption story to share with the community (particularly migration stories from other technologies), please do &lt;a href=&quot;https://groups.google.com/d/msg/javaee-guardians/eAjCCFPWmmg/5HZO9KCZAQAJ&quot;&gt;reach out&lt;/a&gt;.</description>
            <link>http://blog.rahmannet.net/2017/02/moroccos-first-open-source-erp-uses.html</link>
            <author>noreply@blogger.com (Reza Rahman)</author>
            <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://2.bp.blogspot.com/-rQRSlv4hk2I/WJkVJh5YINI/AAAAAAAAE-k/9EZU6WybKrEUHGuqslL_U1a67qTupMslwCLcB/s72-c/deftERP.png" height="72" width="72"/>
            <thr:total>0</thr:total>
        </item>
        <item>
            <guid isPermaLink="false">tag:blogger.com,1999:blog-37157465.post-2203333701689048658</guid>
            <pubDate>Sat, 04 Feb 2017 22:45:00 +0000</pubDate>
            <atom:updated>2017-02-04T18:12:14.501-05:00</atom:updated>
            <title>RebelLabs Survey Shows Java EE Still Dominant, Solid Java EE 7 Adoption</title>
            <description>The&amp;nbsp;RebelLabs Developer Productivity survey is one of the most important ones in the Java ecosystem. It is widely circulated and generally tends to have the most data points. The survey has always asked about Java EE as well as Java SE adoption. The results in the 2016 survey look encouraging for Java EE generally and Java EE 7 specifically, particularly given the seemingly perpetual nay-saying around Java and Java EE in predicable corners of our ever &quot;colorful&quot; industry.&lt;br /&gt;&lt;br /&gt;The RebelLabs survey is a bit different from the similar &lt;a href=&quot;https://blogs.oracle.com/theaquarium/entry/developers_affirm_strong_support_for&quot;&gt;DZone survey&lt;/a&gt; in that it asks participants to make mutually exclusive adoption choices. You can either be a Java EE user or a Java SE user. You are only allowed to choose one specific version of Java EE. While this may not be entirely reflective of more complex scenarios in real life, it does make the results a bit more interesting from an analytical perspective. The 2016 results for Java EE adoption are shown in the graphic below. A clear majority of developers - 58% - identified themselves as Java EE users. This is truly remarkable for a mature open standard like Java EE with a number of non-standard product vendors aggressively positioning themselves as competitors to Java EE for many years now. Even more encouragingly developers seem to be solidly behind Java EE 7 - far more so than previous versions including Java EE 6. It is especially good to see the number of J2EE users at a low percentage.&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://4.bp.blogspot.com/-FgonwulTbvA/WJYtoswIN1I/AAAAAAAAE90/-2ca4rdjoAwkDVIlq2PT2XiuJMiJDd5VACLcB/s1600/zt_javaee.jpg&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;220&quot; src=&quot;https://4.bp.blogspot.com/-FgonwulTbvA/WJYtoswIN1I/AAAAAAAAE90/-2ca4rdjoAwkDVIlq2PT2XiuJMiJDd5VACLcB/s400/zt_javaee.jpg&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;It&#39;s remarkable how similar these results are to other surveys from reliable, neutral sources (the DZone survey results are in the graphic below). There has been another survey from the Vaadin team that also shows Java EE ahead of other alternatives amongst Java developers. I&#39;ll highlight those results as well soon.&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://1.bp.blogspot.com/-BvO3SObcoZw/WJYtuWJqcqI/AAAAAAAAE94/0yWWxxhwqO02ayOmDHPea1rAsY_96n1OgCLcB/s1600/dzone_javaee7.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;113&quot; src=&quot;https://1.bp.blogspot.com/-BvO3SObcoZw/WJYtuWJqcqI/AAAAAAAAE94/0yWWxxhwqO02ayOmDHPea1rAsY_96n1OgCLcB/s400/dzone_javaee7.png&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;While all of this is good news, the Java EE community can ill afford to rest on it&#39;s laurels even for a moment. A number of us in the &lt;a href=&quot;https://javaee-guardians.io/&quot;&gt;Java EE Guardian&lt;/a&gt; community were very worried what the RebelLabs survey was going to show in 2016. This is because the survey was taken when Oracle&#39;s commitment behind Java EE 8 still remained very uncertain. In fact RebelLabs correctly noted this may be a reason for lower participant support for Java EE compared to other years and the Java EE community has hard work ahead of it.&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://www.change.org/p/larry-ellison-tell-oracle-to-move-forward-java-ee-as-a-critical-part-of-the-global-it-industry/c/469142306&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;122&quot; src=&quot;https://3.bp.blogspot.com/-h3FkFDJwDS4/WJZZXJjKMJI/AAAAAAAAE-I/snso7FZTgdwwtB3lr6r5Wjh6N98CoXoagCLcB/s400/simon_javaee.png&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;This is wise advice for the Java EE community and a reason to continue to try our best to advance Java EE. All that being said, it is important to remember that none of these are scientific surveys in any real sense so it is always a good idea to only make high level observations around them. Scientific surveys are truly random, have representative sample sets and clearly identify participants. Most of the surveys we have are unfortunately always self-selection based and at least partially anonymous/online.&lt;br /&gt;&lt;br /&gt;On behalf of the Java EE Guardian community it is only correct to thank everyone that indicate their support for Java EE and Java EE 7 in such surveys. Our volunteer driven work is intended to benefit you first and foremost - it is good to see that intent does not get lost in the muddle.</description>
            <link>http://blog.rahmannet.net/2017/02/rebellabs-survey-shows-java-ee-still.html</link>
            <author>noreply@blogger.com (Reza Rahman)</author>
            <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://4.bp.blogspot.com/-FgonwulTbvA/WJYtoswIN1I/AAAAAAAAE90/-2ca4rdjoAwkDVIlq2PT2XiuJMiJDd5VACLcB/s72-c/zt_javaee.jpg" height="72" width="72"/>
            <thr:total>0</thr:total>
        </item>
        <item>
            <guid isPermaLink="false">tag:blogger.com,1999:blog-37157465.post-6802915852396885082</guid>
            <pubDate>Sun, 29 Jan 2017 01:16:00 +0000</pubDate>
            <atom:updated>2017-01-28T20:21:36.179-05:00</atom:updated>
            <title>DZone/Java EE Guardians Survey Results: HTTP 2/Servlet 4</title>
            <description>As some of you are aware, the &lt;a href=&quot;https://javaee-guardians.io/&quot;&gt;Java EE Guardians&lt;/a&gt; and DZone jointly conducted a community survey to help determine Java EE 8 features prior to JavaOne 2016. You may also be aware that &lt;a href=&quot;https://java.net/projects/javaee-spec/lists/users/archive/2016-09/message/0&quot;&gt;we shared the results of that survey with Oracle&lt;/a&gt; before the details of the renewed Java EE 8 scope was announced. Now is a great time to start analyzing those results a bit more. I&#39;ve already done a &lt;a href=&quot;http://blog.rahmannet.net/2017/01/dzonejava-ee-guardian-survey-results.html&quot;&gt;high level summary of the results&lt;/a&gt;. In this entry I&#39;ll dig specifically into the responses for HTTP/2 and Servlet 4 support in Java EE 8.&lt;br /&gt;&lt;br /&gt;Here is how the survey phrased the question:&lt;br /&gt;&lt;br /&gt;&quot;The much awaited HTTP/2 standard is now complete, was fifteen years in the making and promises to radically speed up the entire web through a series of fundamental protocol optimizations.&lt;br /&gt;&lt;br /&gt;Servlet 4 is the primary vehicle to bring HTTP/2 to server-side Java. Beyond Servlet 4, higher level server-side Java web frameworks like JSF can also take advantage of HTTP/2 to significantly improve performance.&lt;br /&gt;&lt;br /&gt;How important is it to bring HTTP/2 support to Java EE?&quot;.&lt;br /&gt;&lt;br /&gt;The following graphic shows how the community responded. Clearly developers think HTTP/2 support and Servlet 4 is important for Java EE 8. 65% said it is very important while 25% said it is very important. A mere 1% said it is not important. If you want to learn a bit more about HTTP/2 and Servlet 4, please do feel free to check out my &lt;a href=&quot;http://www.slideshare.net/reza_rahman/http2-and-what-it-means-for-the-java-ee-ecosystem&quot;&gt;slide deck&lt;/a&gt; or &lt;a href=&quot;http://www.captechconsulting.com/videos/http2-and-what-it-means-for-the-java-ee-ecosystem&quot;&gt;screencast&lt;/a&gt; on the topic. While it is possible for server implementations to provide some level of HTTP/2 support without Servlet 4, things like server push can only be provided in a manner that developers and framework writers can rely on through Servlet 4. In addition, the Servlet 4 TCK is the only third party verification mechanism that a server actually implements HTTP/2 correctly.&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://2.bp.blogspot.com/--tDnmY4uTto/WI0wE7F8qeI/AAAAAAAAE6M/gwwEKZcSXdk4EtpbeuKumB5Lq2RCPhJIQCLcB/s1600/http2_guardians.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;250&quot; src=&quot;https://2.bp.blogspot.com/--tDnmY4uTto/WI0wE7F8qeI/AAAAAAAAE6M/gwwEKZcSXdk4EtpbeuKumB5Lq2RCPhJIQCLcB/s400/http2_guardians.png&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;Unsurprisingly, &lt;a href=&quot;https://blogs.oracle.com/theaquarium/entry/java_ee_8_community_survey2&quot;&gt;the results for Oracle&#39;s own Java EE 8/9 survey&lt;/a&gt; basically mirrors what the DZone/Java EE Guardians survey indicates. The graphic below shows the results of the Oracle survey. Just as in our survey, Servlet 4 is one the APIs that has the strongest support amongst all Java EE 8/9 features.&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://4.bp.blogspot.com/-rtZoQwZQh8w/WI0wRAvLPlI/AAAAAAAAE6Q/qlNTgu0KTGsi59tbQxa_gTKdf_RB8OAFQCLcB/s1600/http2_oracle.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;125&quot; src=&quot;https://4.bp.blogspot.com/-rtZoQwZQh8w/WI0wRAvLPlI/AAAAAAAAE6Q/qlNTgu0KTGsi59tbQxa_gTKdf_RB8OAFQCLcB/s400/http2_oracle.png&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;Here are some representative comments from participants in the order that people filled in the survey: &quot;Servlet 4 and HTTP/2 are probably the most important parts of Java EE 8&quot;, &quot;Very important as there are a lot of improvements in HTTP/2, it is the future&quot;, &quot;I cannot imagine the next iteration of any serious web-based standard or framework not to take (full) advantage of this advance in the underlying technology&quot;, &quot;HTTP/2 is a big step towards faster communications and applications&quot;, &quot;HTTP/2 is the future of the web&quot;, &quot;I develop web applications with JSF, so yes this is very important&quot;, &quot;Clearly more than very important&quot;. &lt;br /&gt;&lt;br /&gt;Oracle has recommitted to delivering Servlet 4 by the end of this year or sooner. Although the Oracle specification leads have clearly re-engaged in Servlet 4, progress still lags behind some other Java EE 8 JSRs. That said work on Servlet 4 is visibly spinning up as I am writing this. &lt;br /&gt;&lt;br /&gt;Please do stay tuned as I further analyze specific topics in the survey. In addition to my analysis, I would encourage you to look at these survey results yourself and get involved in Java EE 8. You can certainly do so by becoming a part of the&amp;nbsp;&lt;a href=&quot;https://javaee-guardians.io/&quot;&gt;Java EE Guardians&lt;/a&gt;. </description>
            <link>http://blog.rahmannet.net/2017/01/dzonejava-ee-guardians-survey-results.html</link>
            <author>noreply@blogger.com (Reza Rahman)</author>
            <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://2.bp.blogspot.com/--tDnmY4uTto/WI0wE7F8qeI/AAAAAAAAE6M/gwwEKZcSXdk4EtpbeuKumB5Lq2RCPhJIQCLcB/s72-c/http2_guardians.png" height="72" width="72"/>
            <thr:total>0</thr:total>
        </item>
        <item>
            <guid isPermaLink="false">tag:blogger.com,1999:blog-37157465.post-1119497972378189229</guid>
            <pubDate>Tue, 24 Jan 2017 21:37:00 +0000</pubDate>
            <atom:updated>2017-01-24T16:37:17.686-05:00</atom:updated>
            <title>JSF 2.3 Public Review Starts Now!</title>
            <description>JSF 2.3 has just posted a public review (this is the last step before the proposed final specification). Like JSF 2.2, this is slated to be mostly a minor update with various incremental features that the community has requested. Indeed the community has driven JSF 2.3 very heavily, directly committing many of the features into the Mojarra code base. Here is a summary of the features slated for JSF 2.3:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Alignment with the Java SE 8 Date/Time API&lt;/li&gt;&lt;li&gt;Improved CDI support&lt;/li&gt;&lt;li&gt;Formally deprecating the JSF specific bean sub-system in favor of CDI&lt;/li&gt;&lt;li&gt;WebSocket integration&lt;/li&gt;&lt;li&gt;AJAX method invocation&lt;/li&gt;&lt;li&gt;Multi-field validation&lt;/li&gt;&lt;/ul&gt;Besides the above, there are many more smaller grained changes. For details, you should check out the specification document itself (linked below). There is a nice change list at the very start of the document. The community had already been doing a nice job blogging about JSF 2.3 features - particularly folks like Arjan Tijms and Anghel Leonard. Simply Googling JSF 2.3 should go a long way to get a more detailed overview.&lt;br /&gt;&lt;br /&gt;You can download and take a look at the draft specification from the&amp;nbsp;&lt;a href=&quot;https://jcp.org/aboutJava/communityprocess/pr/jsr372/index.html&quot;&gt;JCP site&lt;/a&gt;. If you are a JSF user you should do your part by engaging actively. Here are the many ways you can engage (most of this comes directly from the &lt;a href=&quot;https://glassfish.java.net/adoptajsr&quot;&gt;Adopt-a-JSR page&lt;/a&gt; I drafted while still at Oracle):&lt;br /&gt;&lt;ul&gt;&lt;li&gt;You can still join the specification itself as an expert or a contributor. You can do that via the &lt;a href=&quot;https://www.jcp.org/en/jsr/detail?id=372&quot;&gt;JCP page for the specification&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;You can have your JUG officially support the standard through &lt;a href=&quot;https://java.net/projects/adoptajsr/pages/Home&quot;&gt;Adopt-a-JSR&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;You can simply join the discussion without any ceremony by subscribing to the &lt;a href=&quot;https://java.net/projects/javaserverfaces-spec-public/lists&quot;&gt;JSF specification user alias&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;You can share ideas and feedback, possibly by entering issues in the &lt;a href=&quot;https://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC/&quot;&gt;public issue tracker&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;You can read the public review specification now.&lt;/li&gt;&lt;li&gt;You can try out the reference implementation now.&lt;/li&gt;&lt;li&gt;You can write or speak about JSF 2.3 now.&lt;/li&gt;&lt;li&gt;You can encourage others to participate.&lt;/li&gt;&lt;/ul&gt;The next step is up to you. You can be a real part of Java&#39;s ongoing success yourself instead of simply being a passive consumer. If you have any questions I am happy to try to help - just drop me a note any time.</description>
            <link>http://blog.rahmannet.net/2017/01/jsf-23-public-review-starts-now.html</link>
            <author>noreply@blogger.com (Reza Rahman)</author>
            <thr:total>0</thr:total>
        </item>
        <item>
            <guid isPermaLink="false">tag:blogger.com,1999:blog-37157465.post-2526699685830670396</guid>
            <pubDate>Tue, 24 Jan 2017 04:56:00 +0000</pubDate>
            <atom:updated>2017-01-24T00:09:29.262-05:00</atom:updated>
            <title>DZone/Java EE Guardians Survey Results: A Summary</title>
            <description>As some of you are aware, the &lt;a href=&quot;https://javaee-guardians.io/&quot;&gt;Java EE Guardians&lt;/a&gt; and DZone jointly conducted a community survey to help determine Java EE 8 features prior to JavaOne 2016. You may also be aware that &lt;a href=&quot;https://java.net/projects/javaee-spec/lists/users/archive/2016-09/message/0&quot;&gt;we shared the results of that survey with Oracle&lt;/a&gt; before the details of the renewed Java EE 8 scope was announced. Now is a great time to start analyzing those results a bit more.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;The Motivation and Context&lt;/b&gt;&lt;br /&gt;Shortly before JavaOne 2016, after months of silent inactivity, Oracle announced that it was committed to delivering Java EE 8. While this was undoubtedly good news, the problem was that Oracle appeared to also wish to significantly shift the focus of Java EE 8 - basically unilaterally. Oracle&#39;s rationale was that so much time had passed since initial launch that the focus of Java EE 8 needed to be shifted. We thought the best way to ensure that was a wise thing to do is by asking the community directly through an open survey - the very same way the initial scope of Java EE 8 was formulated.&lt;br /&gt;&lt;br /&gt;As it turns out now, the core objectives of having the survey was accomplished in more than one way. During the JavaOne time-frame, Oracle announced it&#39;s own open survey not just to determine the scope of Java EE 8, but also the scope of Java EE 9. More recently&amp;nbsp;&lt;a href=&quot;https://blogs.oracle.com/theaquarium/entry/java_ee_8_community_survey2&quot;&gt;Oracle announced the results of that survey&lt;/a&gt; and finalized the focus of Java EE 8. Although the surveys were clearly different, the results of the Oracle survey was very similar to what the folks that took the DZone/Java EE Guardians survey indicated. Indeed the ultimate good news is that the final focus of Java EE 8 is basically aligned with the results of the Java EE Guardians/DZone survey. Perhaps that isn&#39;t mere coincidence. At JavaOne 2016 the Java EE specification leads promised to take a very close look at the DZone/Java EE Guardians survey results. If they did indeed do that the community should be humbly relieved and grateful. &lt;br /&gt;&lt;br /&gt;&lt;b&gt;The Results&lt;/b&gt;&lt;br /&gt;The survey did well considering the short time frame that it had been open and the relatively modest resources that we had. In the end we had 800+ input points. While smaller than the Oracle survey this is enough to draw reasonable conclusions on what the community thinks about Java EE 8 scope (for context US professional surveys collect about 1000 random input points for a population size of 300 million+). The quality of the input is quite good including many thoughtful comments. For those that don&#39;t want to read through &lt;a href=&quot;https://drive.google.com/file/d/0B5v0dmBHAiKTRW5FT0twN1JIRTA/view?usp=sharing&quot;&gt;all the survey results&lt;/a&gt;, I&#39;ll provide a short summary:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;The survey completion rate is 100% which shows how serious the folks that participated are.&lt;/li&gt;&lt;li&gt;Almost 70% said they were OK with follow up questions, which shows how engaged the folks that participated are.&lt;/li&gt;&lt;li&gt;There was relatively strong support for Servlet 4, Java SE 8 alignment throughout all Java EE APIs, more robust JSON support and a security API overhaul. &amp;nbsp;&lt;/li&gt;&lt;li&gt;There was reasonable support for dynamic configuration and JCache.&lt;/li&gt;&lt;li&gt;There was relatively weak support for eliminating EJB in favor of CDI, MVC, NoSQL, more reactive programming and microservices.&lt;/li&gt;&lt;li&gt;Most people want Java EE to take a relatively conservative approach to standardization and avoid hype.&lt;/li&gt;&lt;li&gt;The majority of people would like to see the Java EE release frequency accelerated.&lt;/li&gt;&lt;/ul&gt;In the coming weeks I will analyze each of these results in much greater detail. I will also put the results in the context of the Oracle survey results, Oracle&#39;s actions so far as well as other important public data such as the latest &lt;a href=&quot;https://zeroturnaround.com/rebellabs/java-tools-and-technologies-landscape-2016/&quot;&gt;ZeroTurnaround developer productivity survey&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;What Oracle is Doing&lt;/b&gt;&lt;br /&gt;As you may be aware, Oracle promised to deliver Java EE 8 by the end of this year with an altered scope. They have also promised to deliver Java EE 9 by next year. So far things for Java EE 8 look good and it may even be that Java EE 8 will be delivered around the JavaOne 2017 time frame. The following is a summary of what Oracle is doing with Java EE 8 so far:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;They are moving forward with Servlet 4, JSON-P 1.1, JSON-B 1.0, Java EE Security, JAX-RS 2.1 and JSF 2.3. In addition CDI 2 and Bean Validation 2 is moving forward under Red Hat&#39;s leadership.&lt;/li&gt;&lt;li&gt;Oracle is dropping Java EE Management, JMS 2.1 and MVC. However Oracle is transferring full ownership of MVC to the community. The community will move MVC forward on it&#39;s own.&lt;/li&gt;&lt;li&gt;Oracle has not stated a clear position on aligning Java EE 8 with Java SE 8. It seems most of this work will be done including changes to JAX-RS, JSF, JPA and JSON-P. I am &lt;a href=&quot;https://java.net/projects/javaee-spec/lists/users/archive/2016-12/message/7&quot;&gt;following up on this topic&lt;/a&gt; in the Java EE 8 expert group.&lt;/li&gt;&lt;li&gt;Oracle had initially indicated that they would include a new configuration JSR in Java EE 8. It is a bit disappointing that Oracle is now not pursuing this JSR for Java EE 8. However, Oracle has acknowledged that this JSR is important but it is being deferred for now to deliver Java EE 8 on an accelerated schedule.&lt;/li&gt;&lt;li&gt;Oracle has not been clear about what it intends to do with JCache. However, it is already possible to use JCache in Java EE applications.&lt;/li&gt;&lt;/ul&gt;In addition to my more detailed analysis in the next few weeks I would encourage you to look at these survey results yourself and get involved in Java EE 8. You can certainly do so by becoming a part of the &lt;a href=&quot;https://javaee-guardians.io/&quot;&gt;Java EE Guardians&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;Lastly, this entry would not be complete without mentioning the &lt;a href=&quot;http://microprofile.io/&quot;&gt;MicroProfile&lt;/a&gt; initiative. The initiative is forging ahead with a 1.1 release. It is targeting many of the features that Oracle is interested in for Java EE 9, including dynamic configuration. The idea is to make collaboration-based microservices centric products from Java EE vendors available essentially before Java EE 8 is released. We can hope that the MicroProfile efforts will converge with Java EE 9 sooner rather than later. </description>
            <link>http://blog.rahmannet.net/2017/01/dzonejava-ee-guardian-survey-results.html</link>
            <author>noreply@blogger.com (Reza Rahman)</author>
            <thr:total>2</thr:total>
        </item>
        <item>
            <guid isPermaLink="false">tag:blogger.com,1999:blog-37157465.post-9056237865606349685</guid>
            <pubDate>Thu, 19 Jan 2017 22:50:00 +0000</pubDate>
            <atom:updated>2017-01-19T17:50:58.954-05:00</atom:updated>
            <title>JSON-P 1.1 Public Review Starts Now!</title>
            <description>The JSON-P 1.1 (Java API for JSON Processing) specification has just posted a public review (this is the last step before the proposed final specification). For those unaware, JSON-P is a lower level JSON processing API introduced as part of Java EE 7. JSON-P 1.1 is a relatively more minor but important update that will be included in Java EE 8. Java EE 8 will also include a higher level declarative JSON binding API named JSON-B. While JSON binding is clearly important, there are many cases where a simple processing API is more appropriate. JSON-B also depends on JSON-P under the hood.&lt;br /&gt;&lt;br /&gt;These two APIs together are extremely important in making JSON a first class citizen of the standard Java platform, just like JAXP (Java API for XML Processing) and JAXB (Java API for XML Binding) did many years ago for XML. With these two APIs in place Java developers can simply think of JSON as yet another Java serialization format. No more third party libraries and no more configuration - things will simply work out of the box when it comes to processing JSON. In my view these APIs are so critical they should indeed be moved to a modular Java SE release, much like JAXB and JAXP are already a part of Java SE.&lt;br /&gt;&lt;br /&gt;The changes introduced in JSON-P 1.1 mostly includes staying up-to-date with JSON open standards like JSON Pointer and JSON Patch. There is also some Java SE 8 alignment work included in JSON-P 1.1. A very good resource for an introduction is a slide deck from specification lead Dmitry Kornilov as well as Werner Keil from the community presented at Java2Days 2016 (click&amp;nbsp;&lt;a href=&quot;http://www.slideshare.net/DmitryKornilov/json-support-in-java-ee-8&quot;&gt;here&lt;/a&gt;&amp;nbsp;if you can&#39;t see the embedded slide deck).&lt;br /&gt;&lt;br /&gt;&lt;center&gt;&lt;iframe allowfullscreen=&quot;&quot; frameborder=&quot;0&quot; height=&quot;485&quot; marginheight=&quot;0&quot; marginwidth=&quot;0&quot; scrolling=&quot;no&quot; src=&quot;https://www.slideshare.net/slideshow/embed_code/key/msYnhXtHTmxOJz&quot; style=&quot;border-width: 1px; border: 1px solid #ccc; margin-bottom: 5px; max-width: 100%;&quot; width=&quot;595&quot;&gt; &lt;/iframe&gt; &lt;div style=&quot;margin-bottom: 5px;&quot;&gt;&lt;strong&gt; &lt;a href=&quot;https://www.slideshare.net/DmitryKornilov/json-support-in-java-ee-8&quot; target=&quot;_blank&quot; title=&quot;JSON Support in Java EE 8&quot;&gt;JSON Support in Java EE 8&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&quot;https://www.slideshare.net/DmitryKornilov&quot; target=&quot;_blank&quot;&gt;Dmitry Kornilov&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;/center&gt;&lt;br /&gt;You can download and take a look at the draft specification from the&amp;nbsp;&lt;a href=&quot;https://jcp.org/aboutJava/communityprocess/pr/jsr374/index.html&quot;&gt;JCP site&lt;/a&gt;. You should do your part demonstrating first hand that JSON-P 1.1 is a critical standard for Java - by engaging actively. Here are the many ways you can engage (most of this comes directly from the &lt;a href=&quot;https://glassfish.java.net/adoptajsr&quot;&gt;Adopt-a-JSR page&lt;/a&gt; I drafted while still at Oracle):&lt;br /&gt;&lt;ul&gt;&lt;li&gt;You can still join the specification itself as an expert or a contributor. You can do that via the &lt;a href=&quot;https://jcp.org/en/jsr/detail?id=374&quot;&gt;JCP page for the specification&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;You can have your JUG officially support the standard through &lt;a href=&quot;https://java.net/projects/adoptajsr/pages/Home&quot;&gt;Adopt-a-JSR&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;You can simply join the discussion without any ceremony by subscribing to the &lt;a href=&quot;https://java.net/projects/json-processing-spec/lists&quot;&gt;JSON-P 1.1 specification user alias&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;You can share ideas and feedback, possibly by entering issues in the &lt;a href=&quot;http://java.net/jira/browse/JSON_PROCESSING_SPEC&quot;&gt;public issue tracker&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;You can read the public review specification now.&lt;/li&gt;&lt;li&gt;You can try out the reference implementation now.&lt;/li&gt;&lt;li&gt;You can write or speak about JSON-P 1.1 now.&lt;/li&gt;&lt;li&gt;You can encourage others to participate.&lt;/li&gt;&lt;/ul&gt;The next step is up to you. You can be a real part of Java&#39;s ongoing success yourself instead of simply being a passive consumer. If you have any questions I am happy to try to help - just drop me a note any time.</description>
            <link>http://blog.rahmannet.net/2017/01/json-p-11-public-review-starts-now.html</link>
            <author>noreply@blogger.com (Reza Rahman)</author>
            <thr:total>0</thr:total>
        </item>
        <item>
            <guid isPermaLink="false">tag:blogger.com,1999:blog-37157465.post-5558294371782041730</guid>
            <pubDate>Thu, 19 Jan 2017 03:42:00 +0000</pubDate>
            <atom:updated>2017-01-18T23:15:06.659-05:00</atom:updated>
            <title>Java EE 7 in Production at Eko Electricity</title>
            <description>One of the most important things to do at this stage of the life-cycle of Java EE is highlight successful adoption stories at a regular cadence. The community has been doing just that for a long time including at JavaOne. A number of these stories are curated at &lt;a href=&quot;https://real-world-java-ee.zeef.com/arjan.tijms&quot;&gt;Zeef&lt;/a&gt;. Sayo Oladeji recently agreed to share a very cool such adoption story on a mission critical system for Eko Electricity - one of Lagos&#39; largest utilities providers. Sayo had a number of insightful things to say about Java EE worth paying attention to. I have highlighted specific passages that really stand out.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Can you kindly introduce yourself?&lt;/b&gt;&lt;br /&gt;I am Sayo Oladeji, a software engineer at Crown Interactive and co-founder at Hextremelabs. I started programming only 10 years ago and over the years I’ve had opportunities to work on Java SE, ME and EE; other JVM languages like Groovy and Kotlin as well as non-Java technologies like C# and Javascript.&lt;br /&gt;&lt;br /&gt;I manage a lot of integrations with third-party system like lotto engines, payment gateways, business support systems and so forth.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Can you describe the application that uses Java EE? What does your company do?&lt;/b&gt;&lt;br /&gt;Crown Interactive is a major technology provider in the utilities space in Nigeria. We currently provide the end-to-end revenue cycle management (RCM) technology for Eko Electricity Distribution PLC (EKEDP) which serves half of Lagos. To put it in perspective, Lagos has a population of 21 million (2016) and growing at about 85 persons per hour! Besides utilities we also have a lottery system, on-demand media service and a few other applications.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Why did you choose Java EE?&lt;/b&gt;&lt;br /&gt;When we started building out the systems we had a lot of Java EE experience on board. Our consultant was also a JBoss partner. &lt;b&gt;&lt;i&gt;Java EE is a proven standard and JBoss EAP provides us with many things out of the box&lt;/i&gt;&lt;/b&gt;. These include support for web services, clustering, transactions, concurrency, caching, messaging as well as a rich ecosystem of tools; most being open source. It wasn’t a very hard decision to make.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;How does the application use Java EE?&lt;/b&gt;&lt;br /&gt;We started building the system in a multi-tenant, service-oriented manner from day one. We are now breaking some of the modules down into microservices as needs arise.&lt;br /&gt;&lt;ul&gt;&lt;li&gt;We use JAX-WS quite heavily due to the kind of integrations we do. JAX-WS + NetBeans makes SOAP integrations a pleasant experience, probably even more pleasant and definitely quicker than REST due to SOAP’s self-documenting nature (WSDL). Handler chains allow us to perform cross-cutting concerns like reading incoming SOAP envelopes and extracting metadata like authentication and tenant information.&lt;/li&gt;&lt;li&gt;We use JPA across board for data access.&lt;/li&gt;&lt;li&gt;We use JMS for reliable loosely coupled communication between services with ActiveMQ as a message broker and a resource adapter installed for WildFly so that WildFly manages the connections to the broker.&lt;/li&gt;&lt;li&gt;We use JAX-RS for the REST APIs which back our AngularJS web front-end.&lt;/li&gt;&lt;li&gt;We use EJB for handling our core business logic and also for communication between our microservices. For example, our unified collections gateway (UCG) is a module made up of 8 microservices. One of these publishes an EJB that coordinates the interactions between the remaining. The hierarchical relationship between these modules are also neatly represented in the source code as a Maven multi-module project.&lt;/li&gt;&lt;li&gt;Above all, we use CDI heavily. For example, our configurations are centrally managed in a database. We read this into an Infinispan cache (ships with WildFly) on startup and from there CDI producers inject them into beans using qualifiers. This is done in a type-safe manner. The C in CDI is the coolest thing. Bean members are injected based on the context, very important for a multi-tenant system. A JAX-RS filter or JAX-WS handler chain sets up contextual information before execution reaches our beans and the producers being context-aware inject context-specific configuration. We don’t want to bill the wrong partner or load the wrong message template for example.&lt;/li&gt;&lt;/ul&gt;&lt;b&gt;How was your general experience with Java EE? Would you use it again?&lt;/b&gt;&lt;br /&gt;My general experience with Java EE has been very good. Java EE + Maven + NetBeans + IntelliJ IDEA is a really good combination. There are appropriate plugins to configure our server and handle our deployments, generate API docs from REST endpoints, generate JPA entities from database schema and so forth. &lt;b&gt;&lt;i&gt;It’s very quick and easy to get a working project up and running with Java EE 7. Almost everything is POJO and annotation-driven and the generated WAR files are tiny.&lt;/i&gt;&lt;/b&gt;&lt;b&gt;&lt;i&gt; EE 7 is indeed lightweight.&lt;/i&gt;&lt;/b&gt;&lt;br /&gt;&lt;b&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/b&gt;&lt;b&gt;&lt;i&gt;Prior to using a full Java EE server, I have used Java-based platforms like AppEngine and Tomcat but I’ve generally found full EE servers like WildFly to be far more productive.&lt;/i&gt;&lt;/b&gt; In fact, with the WildFly Maven plugin + Docker plugin, it is very easy to make a fully functional and cloud-ready environment all from the pom.xml file. We try to have as many of our deployment tasks (such as downloading and installing JDBC drivers, configuring datasources, logging, cache containers, etc) as possible in the project’s pom.xml file so that our CI (BitBucket Pipelines) build file simply runs &lt;span style=&quot;color: #0b5394; font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;&quot;&gt;mvn clean install –P prod&lt;/span&gt;.&lt;span style=&quot;background-color: white;&quot;&gt; &lt;/span&gt;This is also great for the purpose of documentation. Simply looking at the sources, you can confidently tell how the application is going to run.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;i&gt;I have had a great time developing with Java EE 7 and I will make new projects with it.&lt;/i&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;How can people contact you if they have questions?&lt;/b&gt;&lt;br /&gt;I am available on Twitter as @oluwasayo_ and I can also be reached via email at oladejioluwasayo at gmail dot com.&lt;br /&gt;&lt;br /&gt;If you have a similarly great Java EE adoption story to share with the community (particularly migration stories from other technologies), please do reach out.</description>
            <link>http://blog.rahmannet.net/2017/01/java-ee-7-in-production-at-eko.html</link>
            <author>noreply@blogger.com (Reza Rahman)</author>
            <thr:total>0</thr:total>
        </item>
        <item>
            <guid isPermaLink="false">tag:blogger.com,1999:blog-37157465.post-5886035099912907719</guid>
            <pubDate>Mon, 02 Jan 2017 22:02:00 +0000</pubDate>
            <atom:updated>2017-01-02T17:04:59.445-05:00</atom:updated>
            <title>Java SE 8 and 9 at the Philly JUG</title>
            <description>The Philly JUG continues to march forward under new leadership and I was honored to deliver the September talk(s!?) myself. As ironic as it may seem, the Philly JUG had not had a dedicated talk on Java SE 8 and it was definitely time to close that gap. Fortunately I have just such as talk handy titled &quot;JavaSE.Next – Java SE 8, Java SE 9 and Beyond&quot;.&lt;br /&gt;&lt;br /&gt;The talk covers the big ticket features of Java SE 8 including lambdas, streams, the date/time API and completable futures. I also briefly cover what&#39;s coming in Java SE 9. The slides for the talk is on SlideShare (click &lt;a href=&quot;http://www.slideshare.net/reza_rahman/javasenext-java-se-8-java-se-9-and-beyond&quot;&gt;here&lt;/a&gt; if you can&#39;t see the embedded slides).&lt;br /&gt;&lt;br /&gt;&lt;center&gt;&lt;iframe allowfullscreen=&quot;&quot; frameborder=&quot;0&quot; height=&quot;485&quot; marginheight=&quot;0&quot; marginwidth=&quot;0&quot; scrolling=&quot;no&quot; src=&quot;//www.slideshare.net/slideshow/embed_code/key/yGnz5oFHmXEMfX&quot; style=&quot;border-width: 1px; border: 1px solid #ccc; margin-bottom: 5px; max-width: 100%;&quot; width=&quot;595&quot;&gt; &lt;/iframe&gt; &lt;div style=&quot;margin-bottom: 5px;&quot;&gt;&lt;strong&gt; &lt;a href=&quot;https://www.slideshare.net/reza_rahman/javasenext-java-se-8-java-se-9-and-beyond&quot; target=&quot;_blank&quot; title=&quot;JavaSE.Next – Java SE 8, Java SE 9 and Beyond&quot;&gt;JavaSE.Next – Java SE 8, Java SE 9 and Beyond&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&quot;https://www.slideshare.net/reza_rahman&quot; target=&quot;_blank&quot;&gt;Reza Rahman&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;/center&gt;We tried something in September the Philly JUG has never tried in it&#39;s long existence - we held meetings in both the Western suburbs as well as center city Philadelphia (our talks have historically been held in the Western suburbs). The suburban meeting was held on September 13 while the center city meeting was held on September 14. Combined, the two meetings had one of the highest RSVPs and attendance numbers the JUG has had for a little bit. The meetings were very well-received and I think the twin meeting locations is something to pursue again when possible in the future. My company CapTech was very gracious to sponsor the food for both meetings.&lt;br /&gt;&lt;br /&gt;The Philly JUG&#39;s next meeting on January 17 should be a great follow-up to my talk. Jason Young (also part of the Philly JUG leadership team) is covering Java SE 9 in detail. I highly recommend folks attend the talk and get engaged with Java SE 9 early!&lt;br /&gt;&lt;br /&gt;See you at a Philly JUG meeting in the next few months? In the meanwhile, if you have ideas to improve the JUG, feel free to reach out to the leadership team any time - including myself.</description>
            <link>http://blog.rahmannet.net/2017/01/java-se-8-and-9-at-philly-jug.html</link>
            <author>noreply@blogger.com (Reza Rahman)</author>
            <thr:total>0</thr:total>
        </item>
        <item>
            <guid isPermaLink="false">tag:blogger.com,1999:blog-37157465.post-2140544971565989390</guid>
            <pubDate>Sun, 01 Jan 2017 00:22:00 +0000</pubDate>
            <atom:updated>2016-12-31T19:25:53.378-05:00</atom:updated>
            <title>Java EE @ App Dev Trends</title>
            <description>The App Dev Trends conference was held December 4-9 in Orlando, Florida. Focused on practical enterprise development, it is a brand new part of the popular Live! 360 events. It is chaired by the well-respected veteran technical journalist John K. Waters, editor-in-chief of the Application Development Trends magazine. App Dev Trends helped bring a Java footprint to the otherwise Microsoft technology heavy Live! 360 events, so it was very important for me to help support it. &lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://3.bp.blogspot.com/-YCxpCq2Ni8M/WGhMd8ySm0I/AAAAAAAAEwM/iX5i0IlrU4IjgZnGrWJgTzq5YMelgCVYACLcB/s1600/appdevtrendslogo.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;124&quot; src=&quot;https://3.bp.blogspot.com/-YCxpCq2Ni8M/WGhMd8ySm0I/AAAAAAAAEwM/iX5i0IlrU4IjgZnGrWJgTzq5YMelgCVYACLcB/s320/appdevtrendslogo.png&quot; width=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/div&gt;I was very honored to deliver the opening keynote for the conference. I talked about the critical importance of Java EE to the community, industry and global IT. I discussed the current state of Java EE 8 and Java EE 9, including the Java EE Guardians, the MicroProfile initiative as well as Oracle&#39;s promising announcements at JavaOne 2016. Most importantly I covered what developers can do to help Java and Java EE forward. The heart of the keynote covered the key features Java EE 8 will bring in 2017 such as HTTP/2, a complete security API overhaul, even stronger JSON support, support for HTML 5 Server-Sent Events (SSE), CDI 2, more reactive programming support, more pruning and Java SE 8 alignment. The current slides I used for the talk are here (click &lt;a href=&quot;http://www.slideshare.net/reza_rahman/javaee8&quot;&gt;here&lt;/a&gt; if you can&#39;t see the embedded slide deck): &lt;br /&gt;&lt;br /&gt;&lt;center&gt;&lt;iframe allowfullscreen=&quot;&quot; frameborder=&quot;0&quot; height=&quot;485&quot; marginheight=&quot;0&quot; marginwidth=&quot;0&quot; scrolling=&quot;no&quot; src=&quot;https://www.slideshare.net/slideshow/embed_code/key/573r9DlXi74BSl&quot; style=&quot;border-width: 1px; border: 1px solid #ccc; margin-bottom: 5px; max-width: 100%;&quot; width=&quot;595&quot;&gt; &lt;/iframe&gt; &lt;div style=&quot;margin-bottom: 5px;&quot;&gt;&lt;strong&gt; &lt;a href=&quot;https://www.slideshare.net/reza_rahman/javaee8&quot; target=&quot;_blank&quot; title=&quot;Java EE 8 and Java EE 9 - What You Need to Know&quot;&gt;Java EE 8 and Java EE 9 - What You Need to Know&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&quot;https://www.slideshare.net/reza_rahman&quot; target=&quot;_blank&quot;&gt;Reza Rahman&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;/center&gt;Later the same morning Kito Mann gave his extremely popular talk on PrimeFaces 6. &lt;br /&gt;&lt;br /&gt;After lunch I delivered my talk titled &quot;JCP, Adopt-a-JSR and You&quot;. The talk covers the basics of what the JCP is, how it works and how ordinary developers can participate especially in Java EE 8 JSRs. The talk also covers possible areas of important reform for the JCP. The slide deck for the talk is below (please click &lt;a href=&quot;http://www.slideshare.net/reza_rahman/jcp-adoptajsr-and-you&quot;&gt;here&lt;/a&gt; if you can&#39;t see the embedded slide deck). &lt;br /&gt;&lt;br /&gt;&lt;center&gt;&lt;iframe allowfullscreen=&quot;&quot; frameborder=&quot;0&quot; height=&quot;485&quot; marginheight=&quot;0&quot; marginwidth=&quot;0&quot; scrolling=&quot;no&quot; src=&quot;https://www.slideshare.net/slideshow/embed_code/key/w8xdmFHlsobwSE&quot; style=&quot;border-width: 1px; border: 1px solid #ccc; margin-bottom: 5px; max-width: 100%;&quot; width=&quot;595&quot;&gt; &lt;/iframe&gt; &lt;div style=&quot;margin-bottom: 5px;&quot;&gt;&lt;strong&gt; &lt;a href=&quot;https://www.slideshare.net/reza_rahman/jcp-adoptajsr-and-you&quot; target=&quot;_blank&quot; title=&quot;JCP, Adopt-a-JSR and You&quot;&gt;JCP, Adopt-a-JSR and You&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&quot;https://www.slideshare.net/reza_rahman&quot; target=&quot;_blank&quot;&gt;Reza Rahman&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;/center&gt;Concurrent to my talk, Kito delivered a talk on using JAX-RS with AngularJS 2. &lt;br /&gt;&lt;br /&gt;The third day of the conference in the morning I delivered my talk titled &quot;Down-to-Earth Microservices with Java EE&quot;. The talk has two aims. The first is to try to do the right thing in explaining what microservices really are, what practical value they offer for most of us and when you should consider them (or not). The second aim is to demonstrate why Java EE makes perfect natural sense for developing sensible real world microservices, so called &quot;monoliths&quot; and everything in between. I also briefly cover WildFly Swarm as well as the MicroProfile initiative. The slide deck for this talk is below (click &lt;a href=&quot;https://www.slideshare.net/reza_rahman/javaee-microservices&quot;&gt;here&lt;/a&gt; if you can&#39;t see the embedded slide deck): &lt;br /&gt;&lt;br /&gt;&lt;center&gt;&lt;iframe allowfullscreen=&quot;&quot; frameborder=&quot;0&quot; height=&quot;486&quot; marginheight=&quot;0&quot; marginwidth=&quot;0&quot; scrolling=&quot;no&quot; src=&quot;https://www.slideshare.net/slideshow/embed_code/key/2kRKWi2fuKceuL&quot; style=&quot;border-width: 1px; border: 1px solid #ccc; margin-bottom: 5px; max-width: 100%;&quot; width=&quot;597&quot;&gt; &lt;/iframe&gt; &lt;div style=&quot;margin-bottom: 5px;&quot;&gt;&lt;strong&gt; &lt;a href=&quot;https://www.slideshare.net/reza_rahman/javaee-microservices&quot; target=&quot;_blank&quot; title=&quot;Down-to-Earth Microservices with Java EE&quot;&gt;Down-to-Earth Microservices with Java EE&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&quot;https://www.slideshare.net/reza_rahman&quot; target=&quot;_blank&quot;&gt;Reza Rahman&lt;/a&gt;&lt;/strong&gt;&lt;/div&gt;&lt;/center&gt;The demo code for the talk is available &lt;a href=&quot;https://github.com/m-reza-rahman/javaee-pragmatic-microservices&quot;&gt;here&lt;/a&gt;. The instructions for the demo are designed to help you set up the demo on your own.  I presented this same talk along with Steve Millidge (C2B2, Payara co-founder) at JavaOne. You can view the JavaOne recording of the talk &lt;a href=&quot;https://www.youtube.com/watch?v=bS6zKgMb8So&quot;&gt;here&lt;/a&gt;. &lt;br /&gt;&lt;br /&gt;Later in the morning I delivered my brand new talk titled &quot;Java SE 8 for Java EE 7 Developers&quot;. In the talk I cover some of the key features introduced in Java SE 8 including Lamdas, streams, the new Date/Time API as well as Completable Futures and discuss how they can be used effectively with Java EE 7 APIs like Servlets, Java EE Concurrency Utilities, WebSockets, JPA, JSF and JSON-P. I also cover what should be done in Java EE 8 to further improve Java SE 8 support. The slides for the talk are posted on SlideShare (click &lt;a href=&quot;http://www.slideshare.net/reza_rahman/java-se-8-for-java-ee-developers-63759751&quot;&gt;here&lt;/a&gt; if you can&#39;t see the embedded slide deck). &lt;br /&gt;&lt;br /&gt;&lt;center&gt;&lt;iframe allowfullscreen=&quot;&quot; frameborder=&quot;0&quot; height=&quot;485&quot; marginheight=&quot;0&quot; marginwidth=&quot;0&quot; scrolling=&quot;no&quot; src=&quot;https://www.slideshare.net/slideshow/embed_code/key/1KgjUd54yULuD&quot; style=&quot;border-width: 1px; border: 1px solid #ccc; margin-bottom: 5px; max-width: 100%;&quot; width=&quot;595&quot;&gt; &lt;/iframe&gt; &lt;div style=&quot;margin-bottom: 5px;&quot;&gt;&lt;strong&gt; &lt;a href=&quot;https://www.slideshare.net/reza_rahman/java-se-8-for-java-ee-developers-63759751&quot; target=&quot;_blank&quot; title=&quot;Java SE 8 for Java EE Developers&quot;&gt;Java SE 8 for Java EE Developers&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&quot;https://www.slideshare.net/reza_rahman&quot; target=&quot;_blank&quot;&gt;Reza Rahman&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;/center&gt;I finished the conference by delivering my talk on HTTP/2 and Servlet 4 titled &quot;HTTP/2 and What it Means for the Java EE Ecosystem&quot;. The talk examines the very important changes in HTTP/2 and how these changes need to be adopted by various Java EE 8 APIs like Servlet 4 and JSF 2.3. The slide deck for the talk is posted on SlideShare (click &lt;a href=&quot;http://www.slideshare.net/reza_rahman/http2-and-what-it-means-for-the-java-ee-ecosystem&quot;&gt;here&lt;/a&gt; if you can&#39;t see the embedded resource). &lt;br /&gt;&lt;br /&gt;&lt;center&gt;&lt;iframe allowfullscreen=&quot;&quot; frameborder=&quot;0&quot; height=&quot;485&quot; marginheight=&quot;0&quot; marginwidth=&quot;0&quot; scrolling=&quot;no&quot; src=&quot;https://www.slideshare.net/slideshow/embed_code/key/50HAUU2azGq8gd&quot; style=&quot;border-width: 1px; border: 1px solid #ccc; margin-bottom: 5px; max-width: 100%;&quot; width=&quot;595&quot;&gt; &lt;/iframe&gt; &lt;div style=&quot;margin-bottom: 5px;&quot;&gt;&lt;strong&gt; &lt;a href=&quot;https://www.slideshare.net/reza_rahman/http2-and-what-it-means-for-the-java-ee-ecosystem&quot; target=&quot;_blank&quot; title=&quot;HTTP/2 and What it Means for the Java EE Ecosystem&quot;&gt;HTTP/2 and What it Means for the Java EE Ecosystem&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&quot;https://www.slideshare.net/reza_rahman&quot; target=&quot;_blank&quot;&gt;Reza Rahman&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;/center&gt;A screencast of the talk is available &lt;a href=&quot;https://www.captechconsulting.com/videos/http2-and-what-it-means-for-the-java-ee-ecosystem&quot;&gt;here&lt;/a&gt;. &lt;br /&gt;&lt;br /&gt;All is all, App Dev Trends was worthwhile and I wish the event the best going forward.</description>
            <link>http://blog.rahmannet.net/2016/12/java-ee-app-dev-trends.html</link>
            <author>noreply@blogger.com (Reza Rahman)</author>
            <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://3.bp.blogspot.com/-YCxpCq2Ni8M/WGhMd8ySm0I/AAAAAAAAEwM/iX5i0IlrU4IjgZnGrWJgTzq5YMelgCVYACLcB/s72-c/appdevtrendslogo.png" height="72" width="72"/>
            <thr:total>0</thr:total>
        </item>
        <item>
            <guid isPermaLink="false">tag:blogger.com,1999:blog-37157465.post-3968541649378489735</guid>
            <pubDate>Thu, 29 Dec 2016 20:57:00 +0000</pubDate>
            <atom:updated>2016-12-30T16:34:30.457-05:00</atom:updated>
            <title>Java EE @ Oredev</title>
            <description>Oredev was held 7-11 November in Malmo, Sweden. Although modest in size Oredev takes pride in making an effort to bring together the best and brightest speakers around the world. It is one of the few conferences that rely heavily on targeting and inviting specific speakers as opposed to simply utilizing a call-for-papers. This year was no exception with speakers like Adam Bien, Geertjan Wielenga, Ivar Grimstad, Heather VanCura, Chris Judd, Paul Bakker and Holly Cummins. Java EE had a great showing this year. &lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://4.bp.blogspot.com/-z-JDbwyQkBM/WGVkErowqII/AAAAAAAAEvY/QvSflXxUgtMkY272q7RKSEaO43jQMuFPACLcB/s1600/oredev1.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;https://4.bp.blogspot.com/-z-JDbwyQkBM/WGVkErowqII/AAAAAAAAEvY/QvSflXxUgtMkY272q7RKSEaO43jQMuFPACLcB/s1600/oredev1.png&quot; /&gt;&lt;/a&gt;&lt;/div&gt;Oredev was one of the very first international conferences that invited me as a speaker a good few years ago. I have had the pleasure of speaking at the conference a few times since. This year I am honored to be a part of the program committee helping formulate Java content. Having an insider&#39;s look at the conference I am now even more impressed. Throughout the years I have been a part of the program committee for a number of conferences including JavaOne. The genuine care and passion that the Oredev organizers put into the event is truly extraordinary. I am especially happy that a number of speakers I invited were able to be a part of Oredev this year (you know who you are). It was also another good year speaking myself. &lt;br /&gt;&lt;br /&gt;I started the conference with my brand new all-day workshop titled &quot;Pragmatic Microservices with Java EE and WildFly Swarm&quot;. I start the workshop with trying to do the right thing in explaining what microservices really are, what practical value they offer for most of us and when you should consider them (or not). The hands-on portion of the workshop starts with running a so-called &quot;monolithic&quot; Java EE application on GlassFish (my plan is to port this code over to WildFly). We then separate a small RESTful service out of the application (a so-called &quot;microservice&quot;). At this stage, the microservice is a simple vanilla Java EE thin war also running on WildFly. We then discuss the pros and cons of Java EE thin wars vs. fat jars as well as WildFly Swarm. The next portion of the lab runs the microservice as a fat jar using WildFly Swarm. We finish the lab by discussing concepts such as Linux containers (e.g. Docker), dynamic discovery, health-check, circuit-breakers/bulkheads and client-side load-balancing. We see these concepts in action using the more advanced features beyond fat jars that WildFly Swarm offers. I also cover the new MicroProfile initiative as well as the Java EE 8/Java EE 9 proposed features geared towards microservices.&lt;br /&gt;&lt;br /&gt;The slide deck I use for the workshop is below (click &lt;a href=&quot;https://drive.google.com/file/d/0B5v0dmBHAiKTcUNSMC1oMUhoNUk/view?usp=sharing&quot;&gt;here&lt;/a&gt; if you can&#39;t see the embedded slide deck).&lt;br /&gt;&lt;br /&gt;&lt;center&gt;&lt;iframe height=&quot;450&quot; src=&quot;https://drive.google.com/file/d/0B5v0dmBHAiKTcUNSMC1oMUhoNUk/preview&quot; width=&quot;600&quot;&gt;&lt;/iframe&gt;&lt;/center&gt;&lt;br /&gt;A webcast covering the more lecture-oriented parts of the workshop can be found &lt;a href=&quot;https://www.captechconsulting.com/videos/down-to-earth-microservices-with-vanilla-java-ee&quot;&gt;here&lt;/a&gt;. The code and instructions for the workshop can be found on &lt;a href=&quot;https://github.com/m-reza-rahman/pragmatic-microservices-lab&quot;&gt;GitHub&lt;/a&gt;. I&#39;ve deliberately designed the lab materials to be fairly self-guided so you can definitely use the lab materials on your own (or perhaps even run the lab in your own company/JUG) . You are always welcome to reach out to me when needed. &lt;br /&gt;&lt;br /&gt;The next morning I delivered my talk on HTTP/2 and Servlet 4 titled &quot;HTTP/2 and What it Means for the Java EE Ecosystem&quot;. The talk examines the very important changes in HTTP/2 and how these changes need to be adopted by various Java EE 8 APIs like Servlet 4 and JSF 2.3. The slide deck for the talk is posted on SlideShare (click &lt;a href=&quot;http://www.slideshare.net/reza_rahman/http2-and-what-it-means-for-the-java-ee-ecosystem&quot;&gt;here&lt;/a&gt; if you can&#39;t see the embedded resource).&lt;br /&gt;&lt;br /&gt;&lt;center&gt;&lt;iframe allowfullscreen=&quot;&quot; frameborder=&quot;0&quot; height=&quot;485&quot; marginheight=&quot;0&quot; marginwidth=&quot;0&quot; scrolling=&quot;no&quot; src=&quot;https://www.slideshare.net/slideshow/embed_code/key/50HAUU2azGq8gd&quot; style=&quot;border-width: 1px; border: 1px solid #ccc; margin-bottom: 5px; max-width: 100%;&quot; width=&quot;595&quot;&gt; &lt;/iframe&gt; &lt;div style=&quot;margin-bottom: 5px;&quot;&gt;&lt;strong&gt; &lt;a href=&quot;https://www.slideshare.net/reza_rahman/http2-and-what-it-means-for-the-java-ee-ecosystem&quot; target=&quot;_blank&quot; title=&quot;HTTP/2 and What it Means for the Java EE Ecosystem&quot;&gt;HTTP/2 and What it Means for the Java EE Ecosystem&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&quot;https://www.slideshare.net/reza_rahman&quot; target=&quot;_blank&quot;&gt;Reza Rahman&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;/center&gt;A screencast of the talk is available &lt;a href=&quot;https://www.captechconsulting.com/videos/http2-and-what-it-means-for-the-java-ee-ecosystem&quot;&gt;here&lt;/a&gt;. In the afternoon there was a nice talk on the upcoming CDI 2 standard delivered by one of the members of the specification expert group.&lt;br /&gt;&lt;br /&gt;Early the next day I delivered my brand new talk titled &quot;Java SE 8 for Java EE 7 Developers&quot;. In the talk I cover some of the key features introduced in Java SE 8 including Lamdas, streams, the new Date/Time API as well as Completable Futures and discuss how they can be used effectively with Java EE 7 APIs like Servlets, Java EE Concurrency Utilities, WebSockets, JPA, JSF and JSON-P. I also cover what should be done in Java EE 8 to further improve Java SE 8 support. The slides for the talk are posted on SlideShare (click &lt;a href=&quot;http://www.slideshare.net/reza_rahman/java-se-8-for-java-ee-developers-63759751&quot;&gt;here&lt;/a&gt; if you can&#39;t see the embedded slide deck).&lt;br /&gt;&lt;br /&gt;&lt;center&gt;&lt;iframe allowfullscreen=&quot;&quot; frameborder=&quot;0&quot; height=&quot;485&quot; marginheight=&quot;0&quot; marginwidth=&quot;0&quot; scrolling=&quot;no&quot; src=&quot;https://www.slideshare.net/slideshow/embed_code/key/1KgjUd54yULuD&quot; style=&quot;border-width: 1px; border: 1px solid #ccc; margin-bottom: 5px; max-width: 100%;&quot; width=&quot;595&quot;&gt; &lt;/iframe&gt; &lt;div style=&quot;margin-bottom: 5px;&quot;&gt;&lt;strong&gt; &lt;a href=&quot;https://www.slideshare.net/reza_rahman/java-se-8-for-java-ee-developers-63759751&quot; target=&quot;_blank&quot; title=&quot;Java SE 8 for Java EE Developers&quot;&gt;Java SE 8 for Java EE Developers&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&quot;https://www.slideshare.net/reza_rahman&quot; target=&quot;_blank&quot;&gt;Reza Rahman&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;/center&gt;Towards noon, Ivar delivered a talk on the upcoming MVC 1.0 API. Later in the afternoon Heather delivered a very important talk covering the basics of the JCP and how people can participate directly in the creation of open standards like Java EE 8. I have a version of the talk myself &lt;a href=&quot;http://www.slideshare.net/reza_rahman/jcp-adoptajsr-and-you&quot;&gt;here&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;After Oredev I had the opportunity to visit one of the very unique sites in Southern Sweden - Ladonia. A self-declared &quot;micronation&quot;, Ladonia was created to protect a truly remarkable piece of art named Nimis. Nimis is best understood by seeing it (or looking at photos like mine below - click on the image or &lt;a href=&quot;https://goo.gl/photos/neGpJUkucaamMVh86&quot;&gt;here&lt;/a&gt; to view the full album). It is a set of whimsical seaside structures vaguely resembling a giant playhouse made entirely of driftwood. I suggest visiting Ladonia if you get the opportunity. It is a bit hard to get to (perhaps somewhat deliberately) but well worth the effort.&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://goo.gl/photos/neGpJUkucaamMVh86&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;225&quot; src=&quot;https://4.bp.blogspot.com/-JlTEuoZlchs/WGbRlQJgyEI/AAAAAAAAEv0/RmSp8zA3W5QZM5XYNQkZsOabRoqcmEsrwCLcB/s400/20161112_105319.jpg&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;All in all, I really enjoyed my trip to Sweden and Oredev. I hope to go back soon as well as helping out with Oredev.</description>
            <link>http://blog.rahmannet.net/2016/12/java-ee-oredev.html</link>
            <author>noreply@blogger.com (Reza Rahman)</author>
            <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://4.bp.blogspot.com/-z-JDbwyQkBM/WGVkErowqII/AAAAAAAAEvY/QvSflXxUgtMkY272q7RKSEaO43jQMuFPACLcB/s72-c/oredev1.png" height="72" width="72"/>
            <thr:total>0</thr:total>
        </item>
        <item>
            <guid isPermaLink="false">tag:blogger.com,1999:blog-37157465.post-4621793782864495858</guid>
            <pubDate>Wed, 28 Dec 2016 16:57:00 +0000</pubDate>
            <atom:updated>2016-12-28T14:50:32.086-05:00</atom:updated>
            <title>Java EE @ Java Day Kiev</title>
            <description>Java Day Kiev took place 14-15 October. Led by the Ukrainian JUG, it is one of the most significant developer events in Ukraine. The event attracted a bevy of world-class speakers including Burr Sutter, Ivar Grimstad, Sebastian Daschner, Ruslan Sinitskiy and Edson Yanaga. Java EE had an excellent showing at the event including my own talks. The organizers had invited me in previous years but I could not go to Ukraine due to Oracle&#39;s overly conservative travel restrictions. This year was my opportunity for redemption so it was important for me to attend. I suggest others do the same to support Ukrainian developers when they need us most. &lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://1.bp.blogspot.com/-rimqFfsMNR0/WGPuv4SIskI/AAAAAAAAEuU/4-9ZRzFK65AKY-yUr17C9cA29El1PUhFgCLcB/s1600/ukraine.jpg&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;65&quot; src=&quot;https://1.bp.blogspot.com/-rimqFfsMNR0/WGPuv4SIskI/AAAAAAAAEuU/4-9ZRzFK65AKY-yUr17C9cA29El1PUhFgCLcB/s400/ukraine.jpg&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;The organizers were very kind to arrange a special session on the current state of Java EE with the Ukraine JUG the day before the conference. Ivar and I led the full house session. We talked about Java EE 7 adoption, the importance of Java EE to the ecosystem and the forward plans for Java EE 8 as well as Java EE 9 that Oracle shared at JavaOne 2016. We also talked about the key&amp;nbsp;&lt;a href=&quot;http://microprofile.io/&quot;&gt;MicroProfile&lt;/a&gt; initiative that aims to bring a collaborative, vendor-neutral approach to microservices in the Java ecosystem. The heart of the talk covers the key features Java EE 8 will bring in 2017 such as HTTP/2, a complete security API overhaul, even stronger JSON support, support for HTML 5 Server-Sent Events (SSE), CDI 2, more reactive programming support, more pruning and Java SE 8 alignment. The current slides for the talk are here (click &lt;a href=&quot;http://www.slideshare.net/reza_rahman/javaee8&quot;&gt;here&lt;/a&gt; if you can&#39;t see the embedded slide deck):&lt;br /&gt;&lt;br /&gt;&lt;center&gt;&lt;iframe allowfullscreen=&quot;&quot; frameborder=&quot;0&quot; height=&quot;485&quot; marginheight=&quot;0&quot; marginwidth=&quot;0&quot; scrolling=&quot;no&quot; src=&quot;https://www.slideshare.net/slideshow/embed_code/key/573r9DlXi74BSl&quot; style=&quot;border-width: 1px; border: 1px solid #ccc; margin-bottom: 5px; max-width: 100%;&quot; width=&quot;595&quot;&gt; &lt;/iframe&gt; &lt;div style=&quot;margin-bottom: 5px;&quot;&gt;&lt;strong&gt; &lt;a href=&quot;https://www.slideshare.net/reza_rahman/javaee8&quot; target=&quot;_blank&quot; title=&quot;Java EE 8 and Java EE 9 - What You Need to Know&quot;&gt;Java EE 8 and Java EE 9 - What You Need to Know&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&quot;https://www.slideshare.net/reza_rahman&quot; target=&quot;_blank&quot;&gt;Reza Rahman&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;/center&gt;I was also very honored to be part of the opening keynote panel of Java experts. Shortly after the keynote, Ivar did a detailed demo-driven talk on the MicroProfile. After lunch I ran a hands-on lab on JMS 2 titled &quot;Down-and-Dirty with JMS 2&quot;. The goal of the lab is to give attendees some first-hand experience with the primary changes in JMS 2. In the first hour or so I did a brief presentation overviewing JMS 2 and went over the JMS 2 Javadocs. The rest of the time attendees actually wrote JMS 2 code mostly by themselves. The slides I use are available on SlideShare (click &lt;a href=&quot;http://www.slideshare.net/reza_rahman/whats-new-in-java-message-service-2&quot;&gt;here&lt;/a&gt; if you can&#39;t see the embedded slide deck).&lt;br /&gt;&lt;br /&gt;&lt;center&gt;&lt;iframe allowfullscreen=&quot;&quot; frameborder=&quot;0&quot; height=&quot;485&quot; marginheight=&quot;0&quot; marginwidth=&quot;0&quot; scrolling=&quot;no&quot; src=&quot;https://www.slideshare.net/slideshow/embed_code/key/2YWuJqtu9pxqne&quot; style=&quot;border-width: 1px; border: 1px solid #ccc; margin-bottom: 5px; max-width: 100%;&quot; width=&quot;595&quot;&gt; &lt;/iframe&gt; &lt;div style=&quot;margin-bottom: 5px;&quot;&gt;&lt;strong&gt; &lt;a href=&quot;https://www.slideshare.net/reza_rahman/whats-new-in-java-message-service-2&quot; target=&quot;_blank&quot; title=&quot;JMS.Next(): JMS 2.0 and Beyond&quot;&gt;JMS.Next(): JMS 2.0 and Beyond&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&quot;https://www.slideshare.net/reza_rahman&quot; target=&quot;_blank&quot;&gt;Reza Rahman&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;/center&gt;The lab materials are hosted on &lt;a href=&quot;https://github.com/m-reza-rahman/jms2-lab&quot;&gt;GitHub&lt;/a&gt; for anyone to use. The lab uses NetBeans, WildFly and Arquillian. I&#39;ve deliberately designed the lab materials to be fairly self-guided so you can definitely use the lab materials on your own (or perhaps even run the lab in your own company/JUG) . You are always welcome to reach out to me when needed. In the lab you&#39;ll basically be putting in code to finish a set of JUnit tests using JMS 2, starting from incomplete code with comments on what to do (don&#39;t worry, a completed solution is also posted :-)).&lt;br /&gt;&lt;br /&gt;I started the second day of the conference with my talk on Cargo Tracker/Java EE + DDD. This talk overviews DDD and describes how DDD maps elegantly to Java EE using code examples/demos from the &lt;a href=&quot;http://cargotracker.java.net/&quot;&gt;Cargo Tracker Java EE Blue Prints project&lt;/a&gt;. Below is the slide deck for the talk (click &lt;a href=&quot;http://www.slideshare.net/reza_rahman/domain-driven-design-with-java-ee-6&quot;&gt;here&lt;/a&gt; if you can&#39;t see the embedded slides): &lt;br /&gt;&lt;br /&gt;&lt;center&gt;&lt;iframe allowfullscreen=&quot;&quot; frameborder=&quot;0&quot; height=&quot;485&quot; marginheight=&quot;0&quot; marginwidth=&quot;0&quot; scrolling=&quot;no&quot; src=&quot;https://www.slideshare.net/slideshow/embed_code/key/rfKvFm7fLHuBRi&quot; style=&quot;border-width: 1px; border: 1px solid #ccc; margin-bottom: 5px; max-width: 100%;&quot; width=&quot;595&quot;&gt; &lt;/iframe&gt; &lt;div style=&quot;margin-bottom: 5px;&quot;&gt;&lt;strong&gt; &lt;a href=&quot;https://www.slideshare.net/reza_rahman/domain-driven-design-with-java-ee-6&quot; target=&quot;_blank&quot; title=&quot;Applied Domain-Driven Design Blue Prints for Java EE&quot;&gt;Applied Domain-Driven Design Blue Prints for Java EE&lt;/a&gt; &lt;/strong&gt; von &lt;strong&gt;&lt;a href=&quot;https://www.slideshare.net/reza_rahman&quot; target=&quot;_blank&quot;&gt;Reza Rahman&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;/center&gt;Concurrent to my talk, Sebastian delivered his brilliant talk titled &lt;a href=&quot;https://www.youtube.com/watch?v=JN1iUUitgvY&quot;&gt;&#39;Java EE - the most lightweight enterprise framework?&#39;&lt;/a&gt;. If you really still buy into deliberately spread anti-Java EE propaganda, the linked video will be a serious eye-opener that will make you think twice. After Sebastian&#39;s talk, Ivar did a session covering the details of the Java EE Security 1.0 JSR targeted for Java EE 8.&lt;br /&gt;&lt;br /&gt;I finished out the conference with my talk on HTTP/2 and Servlet 4 titled &quot;HTTP/2 and What it Means for the Java EE Ecosystem&quot;. The talk examines the very important changes in HTTP/2 and how these changes need to be adopted by various Java EE 8 APIs like Servlet 4 and JSF 2.3. The slide deck for the talk is posted on SlideShare (click &lt;a href=&quot;http://www.slideshare.net/reza_rahman/http2-and-what-it-means-for-the-java-ee-ecosystem&quot;&gt;here&lt;/a&gt; if you can&#39;t see the embedded resource).&lt;br /&gt;&lt;br /&gt;&lt;center&gt;&lt;iframe allowfullscreen=&quot;&quot; frameborder=&quot;0&quot; height=&quot;485&quot; marginheight=&quot;0&quot; marginwidth=&quot;0&quot; scrolling=&quot;no&quot; src=&quot;https://www.slideshare.net/slideshow/embed_code/key/50HAUU2azGq8gd&quot; style=&quot;border-width: 1px; border: 1px solid #ccc; margin-bottom: 5px; max-width: 100%;&quot; width=&quot;595&quot;&gt; &lt;/iframe&gt; &lt;div style=&quot;margin-bottom: 5px;&quot;&gt;&lt;strong&gt; &lt;a href=&quot;https://www.slideshare.net/reza_rahman/http2-and-what-it-means-for-the-java-ee-ecosystem&quot; target=&quot;_blank&quot; title=&quot;HTTP/2 and What it Means for the Java EE Ecosystem&quot;&gt;HTTP/2 and What it Means for the Java EE Ecosystem&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&quot;https://www.slideshare.net/reza_rahman&quot; target=&quot;_blank&quot;&gt;Reza Rahman&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;/center&gt;A screencast of the talk is available &lt;a href=&quot;https://www.captechconsulting.com/videos/http2-and-what-it-means-for-the-java-ee-ecosystem&quot;&gt;here&lt;/a&gt;. Please do feel free to adopt the material and deliver the talk yourself.&lt;br /&gt;&lt;br /&gt;I have been to Ukraine before, but I always missed doing something very unique - visiting Chernobyl. This is because of the fact that you need to have an approved guide and prior official permission for the trip. Thanks to the conference organizers, this time I got to do just that. Do check out the absolutely haunting pictures I took (click on the photo below or &lt;a href=&quot;https://goo.gl/photos/CYvEokYK9SmVgsSm8&quot;&gt;here&lt;/a&gt; to view the entire album). Anyone that has a chance should visit Chernobyl at least once. It is a first-hand reminder of what our civilization&#39;s tragic self-destructive leanings can lead to. It is also a reminder of how little we actually matter to the planet - a once bustling town is already well in the process of being completely reclaimed by nature in a mere few decades...&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://goo.gl/photos/CYvEokYK9SmVgsSm8&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;225&quot; src=&quot;https://4.bp.blogspot.com/-R7djkYEBPFE/WGQSulIUCsI/AAAAAAAAEu8/JcNzWimLA_0Umg3dGjRBaheCfWmZUUxpQCLcB/s400/20161016_131255.jpg&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;What impressed me the most on the Chernobyl trip is something I didn&#39;t even know existed - the secret Duga-3 Soviet ICBM early-detection over-the-horizon radar (the so-called &quot;Russian Woodpecker&quot;). Because there was so little time and I did not have the correct climbing gear, I only went up about five flights of the towering radar. On my next trip to Ukraine I plan to take a day to climb to the very top to witness the stunning views myself - certainly before the amazing structure rusts into the oblivion of time.&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://3.bp.blogspot.com/-JWQGuVFzkv4/WGQVdXuf-sI/AAAAAAAAEvI/g-RA-B13LUUto26VPH0NxUJOcNfqIWoVACLcB/s1600/woodpecker3_0.jpg&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;225&quot; src=&quot;https://3.bp.blogspot.com/-JWQGuVFzkv4/WGQVdXuf-sI/AAAAAAAAEvI/g-RA-B13LUUto26VPH0NxUJOcNfqIWoVACLcB/s400/woodpecker3_0.jpg&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;All is all, this was a great and overdue trip to Kiev and Ukraine. I hope to visit again soon!</description>
            <link>http://blog.rahmannet.net/2016/12/java-ee-java-day-kiev.html</link>
            <author>noreply@blogger.com (Reza Rahman)</author>
            <media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://1.bp.blogspot.com/-rimqFfsMNR0/WGPuv4SIskI/AAAAAAAAEuU/4-9ZRzFK65AKY-yUr17C9cA29El1PUhFgCLcB/s72-c/ukraine.jpg" height="72" width="72"/>
            <thr:total>0</thr:total>
        </item>
    </channel>
</rss>